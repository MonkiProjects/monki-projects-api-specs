{
  "openapi": "3.0.3",
  "info": {
    "version": "0.1.0",
    "title": "Monki Projects API"
  },
  "servers": [
    {
      "description": "Monki Projects' API v1 (production)",
      "url": "https://api.monkiprojects.com"
    },
    {
      "description": "Monki Projects' API v1 (staging / development)",
      "url": "https://staging.api.monkiprojects.com"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Endpoints related to users."
    },
    {
      "name": "auth",
      "description": "Endpoints related to authentication."
    },
    {
      "name": "places",
      "description": "Endpoints related to places."
    },
    {
      "name": "localized",
      "description": "Endpoints with localizable responses."
    }
  ],
  "paths": {
    "/users/v1/": {
      "post": {
        "summary": "Create User",
        "description": "Creates a user.",
        "operationId": "createUser",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Informations required to create a user.",
                "type": "object",
                "required": [
                  "username",
                  "display_name",
                  "email",
                  "password",
                  "confirm_password"
                ],
                "properties": {
                  "username": {
                    "description": "A username (`@`).",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^[a-z0-9._-]{3,32}$",
                    "example": "lorem_ipsum"
                  },
                  "display_name": {
                    "description": "A user display name.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 32,
                    "example": "Lorem Ipsum"
                  },
                  "email": {
                    "description": "An email address.",
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "description": "A password.",
                    "type": "string",
                    "minLength": 8
                  },
                  "confirm_password": {
                    "description": "A password.",
                    "type": "string",
                    "minLength": 8
                  }
                },
                "example": {
                  "username": "vapor",
                  "display_name": "Vapor",
                  "email": "test@vapor.codes",
                  "password": "password",
                  "confirm_password": "password"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Private details about a user.",
                  "type": "object",
                  "required": [
                    "id",
                    "username",
                    "display_name",
                    "kind",
                    "updated_at",
                    "details",
                    "email"
                  ],
                  "properties": {
                    "id": {
                      "description": "A `UUID` (or `GUID`).",
                      "type": "string",
                      "format": "uuid",
                      "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                    },
                    "username": {
                      "description": "A username (`@`).",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 32,
                      "pattern": "^[a-z0-9._-]{3,32}$",
                      "example": "lorem_ipsum"
                    },
                    "display_name": {
                      "description": "A user display name.",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 32,
                      "example": "Lorem Ipsum"
                    },
                    "avatar": {
                      "type": "object"
                    },
                    "country": {
                      "description": "The country of a user. Will generally show as a flag next to the user's display name.",
                      "type": "string",
                      "example": "FR"
                    },
                    "kind": {
                      "description": "The kind of a user. Either a regular user or a bot.",
                      "type": "string",
                      "enum": [
                        "user",
                        "bot"
                      ],
                      "default": "user"
                    },
                    "updated_at": {
                      "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-21T17:32:28.000Z"
                    },
                    "details": {
                      "description": "Details about a user.",
                      "type": "object",
                      "required": [
                        "experience",
                        "social_usernames",
                        "created_at"
                      ],
                      "properties": {
                        "bio": {
                          "description": "A user's bio (profile description).",
                          "type": "string"
                        },
                        "location": {
                          "description": "A user's location. It's not formatted nor checked as an existing place, so it could be anything.",
                          "type": "string"
                        },
                        "experience": {
                          "type": "object"
                        },
                        "social_usernames": {
                          "type": "object"
                        },
                        "created_at": {
                          "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-07-21T17:32:28.000Z"
                        }
                      }
                    },
                    "email": {
                      "description": "An email address.",
                      "type": "string",
                      "format": "email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidEmail": {
                    "value": {
                      "error": true,
                      "reason": "Your email address is invalid."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication information is missing or is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "error": true,
                      "reason": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict with other user",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "UsernameNotAvailable": {
                    "value": {
                      "error": true,
                      "reason": "Email or username already taken"
                    }
                  },
                  "EmailNotAvailable": {
                    "value": {
                      "error": true,
                      "reason": "Email or username already taken"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Users",
        "description": "Returns the list of all users.",
        "operationId": "listUsers",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The pagination page. For example, if you paginate 1 to 42 per 10 and ask for the third page, you will get 31 to 40.",
            "required": true,
            "schema": {
              "description": "A pagination page number.",
              "type": "integer",
              "minimum": 1,
              "example": 3
            }
          },
          {
            "in": "query",
            "name": "per",
            "description": "The number of paginated items per page. For example, if you paginate 1 to 42 per 10 and ask for the third page, you will get 31 to 40.",
            "required": true,
            "schema": {
              "description": "The number of paginated items per page.",
              "type": "integer",
              "minimum": 1,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated array of users.",
                  "type": "object",
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "description": "An array of users (without unnecessary details).",
                      "type": "array",
                      "items": {
                        "description": "Public informations about a user (only required ones).",
                        "type": "object",
                        "required": [
                          "id",
                          "username",
                          "display_name",
                          "kind",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "description": "A `UUID` (or `GUID`).",
                            "type": "string",
                            "format": "uuid",
                            "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                          },
                          "username": {
                            "description": "A username (`@`).",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 32,
                            "pattern": "^[a-z0-9._-]{3,32}$",
                            "example": "lorem_ipsum"
                          },
                          "display_name": {
                            "description": "A user display name.",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 32,
                            "example": "Lorem Ipsum"
                          },
                          "avatar": {
                            "type": "object"
                          },
                          "country": {
                            "description": "The country of a user. Will generally show as a flag next to the user's display name.",
                            "type": "string",
                            "example": "FR"
                          },
                          "kind": {
                            "description": "The kind of a user. Either a regular user or a bot.",
                            "type": "string",
                            "enum": [
                              "user",
                              "bot"
                            ],
                            "default": "user"
                          },
                          "updated_at": {
                            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2017-07-21T17:32:28.000Z"
                          }
                        }
                      }
                    },
                    "metadata": {
                      "description": "Metadata about the response's pagination.",
                      "type": "object",
                      "required": [
                        "page",
                        "per",
                        "total"
                      ],
                      "properties": {
                        "page": {
                          "description": "A pagination page number.",
                          "type": "integer",
                          "minimum": 1,
                          "example": 3
                        },
                        "per": {
                          "description": "The number of paginated items per page.",
                          "type": "integer",
                          "minimum": 1,
                          "example": 10
                        },
                        "total": {
                          "description": "The total count of elements in a paginated result. It represents the total in all pages, and **does not** depend on the number of items per page.",
                          "type": "integer",
                          "minimum": 0,
                          "example": 42
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/v1/{userId}": {
      "get": {
        "summary": "Get User Details",
        "description": "Returns details about a particular user.",
        "operationId": "getUser",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "A user ID.",
            "required": true,
            "schema": {
              "description": "A `UUID` (or `GUID`).",
              "type": "string",
              "format": "uuid",
              "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Public informations about a user (including all details).",
                  "type": "object",
                  "required": [
                    "id",
                    "username",
                    "display_name",
                    "kind",
                    "updated_at",
                    "details"
                  ],
                  "properties": {
                    "id": {
                      "description": "A `UUID` (or `GUID`).",
                      "type": "string",
                      "format": "uuid",
                      "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                    },
                    "username": {
                      "description": "A username (`@`).",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 32,
                      "pattern": "^[a-z0-9._-]{3,32}$",
                      "example": "lorem_ipsum"
                    },
                    "display_name": {
                      "description": "A user display name.",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 32,
                      "example": "Lorem Ipsum"
                    },
                    "avatar": {
                      "type": "object"
                    },
                    "country": {
                      "description": "The country of a user. Will generally show as a flag next to the user's display name.",
                      "type": "string",
                      "example": "FR"
                    },
                    "kind": {
                      "description": "The kind of a user. Either a regular user or a bot.",
                      "type": "string",
                      "enum": [
                        "user",
                        "bot"
                      ],
                      "default": "user"
                    },
                    "updated_at": {
                      "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-21T17:32:28.000Z"
                    },
                    "details": {
                      "description": "Details about a user.",
                      "type": "object",
                      "required": [
                        "experience",
                        "social_usernames",
                        "created_at"
                      ],
                      "properties": {
                        "bio": {
                          "description": "A user's bio (profile description).",
                          "type": "string"
                        },
                        "location": {
                          "description": "A user's location. It's not formatted nor checked as an existing place, so it could be anything.",
                          "type": "string"
                        },
                        "experience": {
                          "type": "object"
                        },
                        "social_usernames": {
                          "type": "object"
                        },
                        "created_at": {
                          "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-07-21T17:32:28.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "User not found": {
                    "value": {
                      "error": true,
                      "reason": "User not found."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Bad user ID",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unprocessable Entity": {
                    "value": {
                      "error": true,
                      "reason": "Unprocessable Entity"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete User",
        "description": "Deletes a user.",
        "operationId": "deleteUser",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "A user ID.",
            "required": true,
            "schema": {
              "description": "A `UUID` (or `GUID`).",
              "type": "string",
              "format": "uuid",
              "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication information is missing or is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "error": true,
                      "reason": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "User ID malformatted",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unprocessable Entity": {
                    "value": {
                      "error": true,
                      "reason": "Unprocessable Entity"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/v1/login": {
      "post": {
        "summary": "Log In",
        "operationId": "logIn",
        "tags": [
          "auth"
        ],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A connection token.",
                  "type": "object",
                  "required": [
                    "value",
                    "expires_at",
                    "created_at"
                  ],
                  "properties": {
                    "value": {
                      "description": "A Bearer token.",
                      "type": "string"
                    },
                    "expires_at": {
                      "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). Can be `null`/`nil`.",
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2017-07-21T17:32:28.000Z"
                    },
                    "created_at": {
                      "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-21T17:32:28.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication information is missing or is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/v1/me": {
      "post": {
        "summary": "Get Me",
        "operationId": "getMe",
        "tags": [
          "auth"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Private details about a user.",
                  "type": "object",
                  "required": [
                    "id",
                    "username",
                    "display_name",
                    "kind",
                    "updated_at",
                    "details",
                    "email"
                  ],
                  "properties": {
                    "id": {
                      "description": "A `UUID` (or `GUID`).",
                      "type": "string",
                      "format": "uuid",
                      "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                    },
                    "username": {
                      "description": "A username (`@`).",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 32,
                      "pattern": "^[a-z0-9._-]{3,32}$",
                      "example": "lorem_ipsum"
                    },
                    "display_name": {
                      "description": "A user display name.",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 32,
                      "example": "Lorem Ipsum"
                    },
                    "avatar": {
                      "type": "object"
                    },
                    "country": {
                      "description": "The country of a user. Will generally show as a flag next to the user's display name.",
                      "type": "string",
                      "example": "FR"
                    },
                    "kind": {
                      "description": "The kind of a user. Either a regular user or a bot.",
                      "type": "string",
                      "enum": [
                        "user",
                        "bot"
                      ],
                      "default": "user"
                    },
                    "updated_at": {
                      "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-21T17:32:28.000Z"
                    },
                    "details": {
                      "description": "Details about a user.",
                      "type": "object",
                      "required": [
                        "experience",
                        "social_usernames",
                        "created_at"
                      ],
                      "properties": {
                        "bio": {
                          "description": "A user's bio (profile description).",
                          "type": "string"
                        },
                        "location": {
                          "description": "A user's location. It's not formatted nor checked as an existing place, so it could be anything.",
                          "type": "string"
                        },
                        "experience": {
                          "type": "object"
                        },
                        "social_usernames": {
                          "type": "object"
                        },
                        "created_at": {
                          "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-07-21T17:32:28.000Z"
                        }
                      }
                    },
                    "email": {
                      "description": "An email address.",
                      "type": "string",
                      "format": "email"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication information is missing or is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/places/v1/": {
      "post": {
        "summary": "Create Place",
        "description": "Creates a place.",
        "operationId": "createPlace",
        "tags": [
          "places",
          "localized"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "locale",
            "description": "The desired locale for response localization.",
            "schema": {
              "description": "A locale, as described in [Language and Locale IDs](https://tinyurl.com/apple-language-and-locale-ids).",
              "type": "string",
              "format": "locale",
              "minLength": 2,
              "default": "en",
              "example": "fr-FR"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "An object with data required to create a new place.",
                "type": "object",
                "required": [
                  "name",
                  "latitude",
                  "longitude",
                  "kind",
                  "properties"
                ],
                "properties": {
                  "name": {
                    "description": "A place `name`.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 48
                  },
                  "latitude": {
                    "description": "The latitude component of a coordinate.",
                    "type": "number",
                    "format": "double",
                    "minimum": -90,
                    "maximum": 90
                  },
                  "longitude": {
                    "description": "The longitude component of a coordinate.",
                    "type": "number",
                    "format": "double",
                    "minimum": -180,
                    "maximum": 180
                  },
                  "kind": {
                    "description": "A place kind `ID`.",
                    "type": "string",
                    "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
                  },
                  "caption": {
                    "description": "A place `caption`. Possibly empty.",
                    "type": "string",
                    "nullable": true,
                    "example": "A great training spot with good walls of different sizes."
                  },
                  "images": {
                    "description": "An array of image `URL`s.",
                    "type": "array",
                    "maxItems": 48,
                    "items": {
                      "description": "An image `URL`.",
                      "type": "string",
                      "format": "uri",
                      "example": "https://monkiprojects.com"
                    }
                  },
                  "properties": {
                    "description": "An array of place properties.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                      "description": "A localized place property.",
                      "type": "object",
                      "required": [
                        "id",
                        "title",
                        "kind"
                      ],
                      "properties": {
                        "id": {
                          "description": "A place property `ID`.",
                          "type": "string",
                          "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                          "example": "small_wall"
                        },
                        "title": {
                          "description": "A localized `title`.",
                          "type": "string",
                          "minLength": 1
                        },
                        "kind": {
                          "description": "A place property kind.",
                          "type": "string",
                          "enum": [
                            "feature",
                            "technique",
                            "benefit",
                            "hazard"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A place, with all its details.",
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "latitude",
                    "longitude",
                    "kind",
                    "category",
                    "state",
                    "creator",
                    "details",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "description": "A `UUID` (or `GUID`).",
                      "type": "string",
                      "format": "uuid",
                      "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                    },
                    "name": {
                      "description": "A place `name`.",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 48
                    },
                    "latitude": {
                      "description": "The latitude component of a coordinate.",
                      "type": "number",
                      "format": "double",
                      "minimum": -90,
                      "maximum": 90
                    },
                    "longitude": {
                      "description": "The longitude component of a coordinate.",
                      "type": "number",
                      "format": "double",
                      "minimum": -180,
                      "maximum": 180
                    },
                    "kind": {
                      "description": "A place kind `ID`.",
                      "type": "string",
                      "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
                    },
                    "category": {
                      "description": "A place category `ID`.",
                      "type": "string",
                      "enum": [
                        "unknown",
                        "spot",
                        "facility",
                        "misc"
                      ]
                    },
                    "state": {
                      "description": "The state in which a place is.",
                      "type": "string",
                      "enum": [
                        "unknown",
                        "draft",
                        "local",
                        "private",
                        "submitted",
                        "published",
                        "rejected"
                      ]
                    },
                    "creator": {
                      "description": "A `UUID` (or `GUID`).",
                      "type": "string",
                      "format": "uuid",
                      "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                    },
                    "details": {
                      "description": "The details of a place.",
                      "type": "object",
                      "required": [
                        "caption",
                        "satellite_image",
                        "images",
                        "properties"
                      ],
                      "properties": {
                        "caption": {
                          "description": "A place `caption`. Possibly empty.",
                          "type": "string",
                          "nullable": true,
                          "example": "A great training spot with good walls of different sizes."
                        },
                        "satellite_image": {
                          "description": "An image `URL`.",
                          "type": "string",
                          "format": "uri",
                          "example": "https://monkiprojects.com"
                        },
                        "images": {
                          "description": "An array of image `URL`s.",
                          "type": "array",
                          "maxItems": 48,
                          "items": {
                            "description": "An image `URL`.",
                            "type": "string",
                            "format": "uri",
                            "example": "https://monkiprojects.com"
                          }
                        },
                        "location": {
                          "description": "The location (address) of a place.",
                          "type": "object",
                          "required": [
                            "city",
                            "country"
                          ],
                          "properties": {
                            "city": {
                              "description": "The city in which a place is.",
                              "type": "string",
                              "minLength": 1,
                              "example": "Nantes"
                            },
                            "country": {
                              "description": "The city in which a place is.",
                              "type": "string",
                              "minLength": 1,
                              "example": "France"
                            }
                          }
                        },
                        "properties": {
                          "description": "An array of place properties.",
                          "type": "array",
                          "uniqueItems": true,
                          "items": {
                            "description": "A localized place property.",
                            "type": "object",
                            "required": [
                              "id",
                              "title",
                              "kind"
                            ],
                            "properties": {
                              "id": {
                                "description": "A place property `ID`.",
                                "type": "string",
                                "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                                "example": "small_wall"
                              },
                              "title": {
                                "description": "A localized `title`.",
                                "type": "string",
                                "minLength": 1
                              },
                              "kind": {
                                "description": "A place property kind.",
                                "type": "string",
                                "enum": [
                                  "feature",
                                  "technique",
                                  "benefit",
                                  "hazard"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "created_at": {
                      "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-21T17:32:28.000Z"
                    },
                    "updated_at": {
                      "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-21T17:32:28.000Z"
                    }
                  }
                },
                "examples": {
                  "Created place": {
                    "summary": "Newly created place",
                    "value": {
                      "latitude": 48.8583,
                      "longitude": 2.2945,
                      "category": "spot",
                      "kind": "training_spot",
                      "creator": "D9CFF0B0-75DA-4A59-9BDB-A268299F4C97",
                      "details": {
                        "images": [],
                        "satellite_image": "https://res.cloudinary.com/monki-projects/image/upload/f_auto/satellite_images/satellite-view-placeholder.jpg",
                        "caption": "Test caption",
                        "properties": [
                          {
                            "id": "small_wall",
                            "title": "Small Wall",
                            "kind": "feature"
                          }
                        ]
                      },
                      "created_at": "2021-03-10T09:01:04Z",
                      "state": "private",
                      "id": "FD58CE36-5504-4743-8E9F-955A6D18DAA1",
                      "updated_at": "2021-03-10T09:01:04Z",
                      "name": "Test place"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Missing field": {
                    "value": {
                      "error": true,
                      "reason": "name is required"
                    }
                  },
                  "Name too small": {
                    "value": {
                      "error": true,
                      "reason": "name is less than minimum of 3 character(s)"
                    }
                  },
                  "Invalid coordinates": {
                    "value": {
                      "error": true,
                      "reason": "latitude is greater than maximum of 90.0"
                    }
                  },
                  "Invalid kind": {
                    "description": "We could not find the place kind you provided.",
                    "value": {
                      "error": true,
                      "reason": "Place kind not found"
                    }
                  },
                  "Invalid property": {
                    "value": {
                      "error": true,
                      "reason": "Invalid property: { \"kind\": \"feature\", \"id\": \"random_id\" }"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "No auth provided": {
                    "value": {
                      "error": true,
                      "reason": "Invalid authorization token."
                    }
                  },
                  "Invalid auth type": {
                    "value": {
                      "error": true,
                      "reason": "Invalid authorization token."
                    }
                  },
                  "Invalid token": {
                    "value": {
                      "error": true,
                      "reason": "Invalid authorization token."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Places",
        "description": "Lists all published places by default. If a `state` query parameter is set, this endpoint will list all places in the specified state.",
        "operationId": "listPlaces",
        "tags": [
          "places",
          "localized"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The pagination page. For example, if you paginate 1 to 42 per 10 and ask for the third page, you will get 31 to 40.",
            "required": true,
            "schema": {
              "description": "A pagination page number.",
              "type": "integer",
              "minimum": 1,
              "example": 3
            }
          },
          {
            "in": "query",
            "name": "per",
            "description": "The number of paginated items per page. For example, if you paginate 1 to 42 per 10 and ask for the third page, you will get 31 to 40.",
            "required": true,
            "schema": {
              "description": "The number of paginated items per page.",
              "type": "integer",
              "minimum": 1,
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "state",
            "description": "A state to filter places. Default is 'published'.",
            "schema": {
              "description": "The state in which a place is.",
              "type": "string",
              "enum": [
                "unknown",
                "draft",
                "local",
                "private",
                "submitted",
                "published",
                "rejected"
              ]
            }
          },
          {
            "in": "query",
            "name": "locale",
            "description": "The desired locale for response localization.",
            "schema": {
              "description": "A locale, as described in [Language and Locale IDs](https://tinyurl.com/apple-language-and-locale-ids).",
              "type": "string",
              "format": "locale",
              "minLength": 2,
              "default": "en",
              "example": "fr-FR"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated array of places.",
                  "type": "object",
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "description": "An array of places.",
                      "type": "array",
                      "items": {
                        "description": "A place, with all its details.",
                        "type": "object",
                        "required": [
                          "id",
                          "name",
                          "latitude",
                          "longitude",
                          "kind",
                          "category",
                          "state",
                          "creator",
                          "details",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "description": "A `UUID` (or `GUID`).",
                            "type": "string",
                            "format": "uuid",
                            "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                          },
                          "name": {
                            "description": "A place `name`.",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 48
                          },
                          "latitude": {
                            "description": "The latitude component of a coordinate.",
                            "type": "number",
                            "format": "double",
                            "minimum": -90,
                            "maximum": 90
                          },
                          "longitude": {
                            "description": "The longitude component of a coordinate.",
                            "type": "number",
                            "format": "double",
                            "minimum": -180,
                            "maximum": 180
                          },
                          "kind": {
                            "description": "A place kind `ID`.",
                            "type": "string",
                            "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
                          },
                          "category": {
                            "description": "A place category `ID`.",
                            "type": "string",
                            "enum": [
                              "unknown",
                              "spot",
                              "facility",
                              "misc"
                            ]
                          },
                          "state": {
                            "description": "The state in which a place is.",
                            "type": "string",
                            "enum": [
                              "unknown",
                              "draft",
                              "local",
                              "private",
                              "submitted",
                              "published",
                              "rejected"
                            ]
                          },
                          "creator": {
                            "description": "A `UUID` (or `GUID`).",
                            "type": "string",
                            "format": "uuid",
                            "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                          },
                          "details": {
                            "description": "The details of a place.",
                            "type": "object",
                            "required": [
                              "caption",
                              "satellite_image",
                              "images",
                              "properties"
                            ],
                            "properties": {
                              "caption": {
                                "description": "A place `caption`. Possibly empty.",
                                "type": "string",
                                "nullable": true,
                                "example": "A great training spot with good walls of different sizes."
                              },
                              "satellite_image": {
                                "description": "An image `URL`.",
                                "type": "string",
                                "format": "uri",
                                "example": "https://monkiprojects.com"
                              },
                              "images": {
                                "description": "An array of image `URL`s.",
                                "type": "array",
                                "maxItems": 48,
                                "items": {
                                  "description": "An image `URL`.",
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://monkiprojects.com"
                                }
                              },
                              "location": {
                                "description": "The location (address) of a place.",
                                "type": "object",
                                "required": [
                                  "city",
                                  "country"
                                ],
                                "properties": {
                                  "city": {
                                    "description": "The city in which a place is.",
                                    "type": "string",
                                    "minLength": 1,
                                    "example": "Nantes"
                                  },
                                  "country": {
                                    "description": "The city in which a place is.",
                                    "type": "string",
                                    "minLength": 1,
                                    "example": "France"
                                  }
                                }
                              },
                              "properties": {
                                "description": "An array of place properties.",
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                  "description": "A localized place property.",
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "title",
                                    "kind"
                                  ],
                                  "properties": {
                                    "id": {
                                      "description": "A place property `ID`.",
                                      "type": "string",
                                      "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                                      "example": "small_wall"
                                    },
                                    "title": {
                                      "description": "A localized `title`.",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "kind": {
                                      "description": "A place property kind.",
                                      "type": "string",
                                      "enum": [
                                        "feature",
                                        "technique",
                                        "benefit",
                                        "hazard"
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "created_at": {
                            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2017-07-21T17:32:28.000Z"
                          },
                          "updated_at": {
                            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2017-07-21T17:32:28.000Z"
                          }
                        }
                      }
                    },
                    "metadata": {
                      "description": "Metadata about the response's pagination.",
                      "type": "object",
                      "required": [
                        "page",
                        "per",
                        "total"
                      ],
                      "properties": {
                        "page": {
                          "description": "A pagination page number.",
                          "type": "integer",
                          "minimum": 1,
                          "example": 3
                        },
                        "per": {
                          "description": "The number of paginated items per page.",
                          "type": "integer",
                          "minimum": 1,
                          "example": 10
                        },
                        "total": {
                          "description": "The total count of elements in a paginated result. It represents the total in all pages, and **does not** depend on the number of items per page.",
                          "type": "integer",
                          "minimum": 0,
                          "example": 42
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Invalid state query param": {
                    "value": {
                      "error": true,
                      "reason": "Cannot initialize State from invalid String value lorem_ipsum for key state"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "No auth provided": {
                    "value": {
                      "error": true,
                      "reason": "Invalid authorization token."
                    }
                  },
                  "Invalid auth type": {
                    "value": {
                      "error": true,
                      "reason": "Invalid authorization token."
                    }
                  },
                  "Invalid token": {
                    "value": {
                      "error": true,
                      "reason": "Invalid authorization token."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Private state": {
                    "value": {
                      "error": true,
                      "reason": "You cannot list private places without being authenticated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/places/v1/{placeId}": {
      "get": {
        "summary": "Get Place",
        "description": "Gets a place's details.",
        "operationId": "getPlace",
        "tags": [
          "places",
          "localized"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "A unique place identifier.",
            "required": true,
            "schema": {
              "description": "A `UUID` (or `GUID`).",
              "type": "string",
              "format": "uuid",
              "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
            }
          },
          {
            "in": "query",
            "name": "locale",
            "description": "The desired locale for response localization.",
            "schema": {
              "description": "A locale, as described in [Language and Locale IDs](https://tinyurl.com/apple-language-and-locale-ids).",
              "type": "string",
              "format": "locale",
              "minLength": 2,
              "default": "en",
              "example": "fr-FR"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A place, with all its details.",
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "latitude",
                    "longitude",
                    "kind",
                    "category",
                    "state",
                    "creator",
                    "details",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "description": "A `UUID` (or `GUID`).",
                      "type": "string",
                      "format": "uuid",
                      "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                    },
                    "name": {
                      "description": "A place `name`.",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 48
                    },
                    "latitude": {
                      "description": "The latitude component of a coordinate.",
                      "type": "number",
                      "format": "double",
                      "minimum": -90,
                      "maximum": 90
                    },
                    "longitude": {
                      "description": "The longitude component of a coordinate.",
                      "type": "number",
                      "format": "double",
                      "minimum": -180,
                      "maximum": 180
                    },
                    "kind": {
                      "description": "A place kind `ID`.",
                      "type": "string",
                      "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
                    },
                    "category": {
                      "description": "A place category `ID`.",
                      "type": "string",
                      "enum": [
                        "unknown",
                        "spot",
                        "facility",
                        "misc"
                      ]
                    },
                    "state": {
                      "description": "The state in which a place is.",
                      "type": "string",
                      "enum": [
                        "unknown",
                        "draft",
                        "local",
                        "private",
                        "submitted",
                        "published",
                        "rejected"
                      ]
                    },
                    "creator": {
                      "description": "A `UUID` (or `GUID`).",
                      "type": "string",
                      "format": "uuid",
                      "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                    },
                    "details": {
                      "description": "The details of a place.",
                      "type": "object",
                      "required": [
                        "caption",
                        "satellite_image",
                        "images",
                        "properties"
                      ],
                      "properties": {
                        "caption": {
                          "description": "A place `caption`. Possibly empty.",
                          "type": "string",
                          "nullable": true,
                          "example": "A great training spot with good walls of different sizes."
                        },
                        "satellite_image": {
                          "description": "An image `URL`.",
                          "type": "string",
                          "format": "uri",
                          "example": "https://monkiprojects.com"
                        },
                        "images": {
                          "description": "An array of image `URL`s.",
                          "type": "array",
                          "maxItems": 48,
                          "items": {
                            "description": "An image `URL`.",
                            "type": "string",
                            "format": "uri",
                            "example": "https://monkiprojects.com"
                          }
                        },
                        "location": {
                          "description": "The location (address) of a place.",
                          "type": "object",
                          "required": [
                            "city",
                            "country"
                          ],
                          "properties": {
                            "city": {
                              "description": "The city in which a place is.",
                              "type": "string",
                              "minLength": 1,
                              "example": "Nantes"
                            },
                            "country": {
                              "description": "The city in which a place is.",
                              "type": "string",
                              "minLength": 1,
                              "example": "France"
                            }
                          }
                        },
                        "properties": {
                          "description": "An array of place properties.",
                          "type": "array",
                          "uniqueItems": true,
                          "items": {
                            "description": "A localized place property.",
                            "type": "object",
                            "required": [
                              "id",
                              "title",
                              "kind"
                            ],
                            "properties": {
                              "id": {
                                "description": "A place property `ID`.",
                                "type": "string",
                                "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                                "example": "small_wall"
                              },
                              "title": {
                                "description": "A localized `title`.",
                                "type": "string",
                                "minLength": 1
                              },
                              "kind": {
                                "description": "A place property kind.",
                                "type": "string",
                                "enum": [
                                  "feature",
                                  "technique",
                                  "benefit",
                                  "hazard"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "created_at": {
                      "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-21T17:32:28.000Z"
                    },
                    "updated_at": {
                      "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-21T17:32:28.000Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Place not found": {
                    "value": {
                      "error": true,
                      "reason": "Place not found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Place",
        "description": "Deletes a place.",
        "operationId": "deletePlace",
        "tags": [
          "places"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "A unique place identifier.",
            "required": true,
            "schema": {
              "description": "A `UUID` (or `GUID`).",
              "type": "string",
              "format": "uuid",
              "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "No auth provided": {
                    "value": {
                      "error": true,
                      "reason": "Invalid authorization token."
                    }
                  },
                  "Invalid auth type": {
                    "value": {
                      "error": true,
                      "reason": "Invalid authorization token."
                    }
                  },
                  "Invalid token": {
                    "value": {
                      "error": true,
                      "reason": "Invalid authorization token."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Not your place": {
                    "description": "You cannot delete someone else's place.",
                    "value": {
                      "error": true,
                      "reason": "You cannot delete someone else's place!"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Place not found": {
                    "value": {
                      "error": true,
                      "reason": "Place not found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/places/v1/properties": {
      "get": {
        "summary": "List Available Place Properties",
        "description": "Lists available place properties by kind.",
        "operationId": "listPlaceProperties",
        "tags": [
          "places",
          "localized"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "kind",
            "description": "A kind to filter properties.",
            "required": true,
            "schema": {
              "description": "A place property kind.",
              "type": "string",
              "enum": [
                "feature",
                "technique",
                "benefit",
                "hazard"
              ]
            }
          },
          {
            "in": "query",
            "name": "locale",
            "description": "The desired locale for response localization.",
            "schema": {
              "description": "A locale, as described in [Language and Locale IDs](https://tinyurl.com/apple-language-and-locale-ids).",
              "type": "string",
              "format": "locale",
              "minLength": 2,
              "default": "en",
              "example": "fr-FR"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An array of place properties.",
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "description": "A localized place property.",
                    "type": "object",
                    "required": [
                      "id",
                      "title",
                      "kind"
                    ],
                    "properties": {
                      "id": {
                        "description": "A place property `ID`.",
                        "type": "string",
                        "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                        "example": "small_wall"
                      },
                      "title": {
                        "description": "A localized `title`.",
                        "type": "string",
                        "minLength": 1
                      },
                      "kind": {
                        "description": "A place property kind.",
                        "type": "string",
                        "enum": [
                          "feature",
                          "technique",
                          "benefit",
                          "hazard"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error thrown by an API.",
                  "type": "object",
                  "required": [
                    "error",
                    "reason"
                  ],
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Invalid property kind": {
                    "value": {
                      "error": true,
                      "reason": "Invalid property kind: \"lorem\""
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "User.ID": {
        "description": "A `UUID` (or `GUID`).",
        "type": "string",
        "format": "uuid",
        "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
      },
      "User.Username": {
        "description": "A username (`@`).",
        "type": "string",
        "minLength": 3,
        "maxLength": 32,
        "pattern": "^[a-z0-9._-]{3,32}$",
        "example": "lorem_ipsum"
      },
      "User.DisplayName": {
        "description": "A user display name.",
        "type": "string",
        "minLength": 3,
        "maxLength": 32,
        "example": "Lorem Ipsum"
      },
      "User.Country": {
        "description": "The country of a user. Will generally show as a flag next to the user's display name.",
        "type": "string",
        "example": "FR"
      },
      "User.Kind": {
        "description": "The kind of a user. Either a regular user or a bot.",
        "type": "string",
        "enum": [
          "user",
          "bot"
        ],
        "default": "user"
      },
      "User.Bio": {
        "description": "A user's bio (profile description).",
        "type": "string"
      },
      "User.Location": {
        "description": "A user's location. It's not formatted nor checked as an existing place, so it could be anything.",
        "type": "string"
      },
      "User.Experience": {
        "type": "object"
      },
      "User.SocialUsernames": {
        "type": "object"
      },
      "User.Public.Small": {
        "description": "Public informations about a user (only required ones).",
        "type": "object",
        "required": [
          "id",
          "username",
          "display_name",
          "kind",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "A `UUID` (or `GUID`).",
            "type": "string",
            "format": "uuid",
            "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
          },
          "username": {
            "description": "A username (`@`).",
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "pattern": "^[a-z0-9._-]{3,32}$",
            "example": "lorem_ipsum"
          },
          "display_name": {
            "description": "A user display name.",
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "example": "Lorem Ipsum"
          },
          "avatar": {
            "type": "object"
          },
          "country": {
            "description": "The country of a user. Will generally show as a flag next to the user's display name.",
            "type": "string",
            "example": "FR"
          },
          "kind": {
            "description": "The kind of a user. Either a regular user or a bot.",
            "type": "string",
            "enum": [
              "user",
              "bot"
            ],
            "default": "user"
          },
          "updated_at": {
            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "type": "string",
            "format": "date-time",
            "example": "2017-07-21T17:32:28.000Z"
          }
        }
      },
      "User.Details": {
        "description": "Details about a user.",
        "type": "object",
        "required": [
          "experience",
          "social_usernames",
          "created_at"
        ],
        "properties": {
          "bio": {
            "description": "A user's bio (profile description).",
            "type": "string"
          },
          "location": {
            "description": "A user's location. It's not formatted nor checked as an existing place, so it could be anything.",
            "type": "string"
          },
          "experience": {
            "type": "object"
          },
          "social_usernames": {
            "type": "object"
          },
          "created_at": {
            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "type": "string",
            "format": "date-time",
            "example": "2017-07-21T17:32:28.000Z"
          }
        }
      },
      "User.Public.Full": {
        "description": "Public informations about a user (including all details).",
        "type": "object",
        "required": [
          "id",
          "username",
          "display_name",
          "kind",
          "updated_at",
          "details"
        ],
        "properties": {
          "id": {
            "description": "A `UUID` (or `GUID`).",
            "type": "string",
            "format": "uuid",
            "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
          },
          "username": {
            "description": "A username (`@`).",
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "pattern": "^[a-z0-9._-]{3,32}$",
            "example": "lorem_ipsum"
          },
          "display_name": {
            "description": "A user display name.",
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "example": "Lorem Ipsum"
          },
          "avatar": {
            "type": "object"
          },
          "country": {
            "description": "The country of a user. Will generally show as a flag next to the user's display name.",
            "type": "string",
            "example": "FR"
          },
          "kind": {
            "description": "The kind of a user. Either a regular user or a bot.",
            "type": "string",
            "enum": [
              "user",
              "bot"
            ],
            "default": "user"
          },
          "updated_at": {
            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "type": "string",
            "format": "date-time",
            "example": "2017-07-21T17:32:28.000Z"
          },
          "details": {
            "description": "Details about a user.",
            "type": "object",
            "required": [
              "experience",
              "social_usernames",
              "created_at"
            ],
            "properties": {
              "bio": {
                "description": "A user's bio (profile description).",
                "type": "string"
              },
              "location": {
                "description": "A user's location. It's not formatted nor checked as an existing place, so it could be anything.",
                "type": "string"
              },
              "experience": {
                "type": "object"
              },
              "social_usernames": {
                "type": "object"
              },
              "created_at": {
                "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                "type": "string",
                "format": "date-time",
                "example": "2017-07-21T17:32:28.000Z"
              }
            }
          }
        }
      },
      "User.Private": {
        "description": "Private details about a user.",
        "type": "object",
        "required": [
          "id",
          "username",
          "display_name",
          "kind",
          "updated_at",
          "details",
          "email"
        ],
        "properties": {
          "id": {
            "description": "A `UUID` (or `GUID`).",
            "type": "string",
            "format": "uuid",
            "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
          },
          "username": {
            "description": "A username (`@`).",
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "pattern": "^[a-z0-9._-]{3,32}$",
            "example": "lorem_ipsum"
          },
          "display_name": {
            "description": "A user display name.",
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "example": "Lorem Ipsum"
          },
          "avatar": {
            "type": "object"
          },
          "country": {
            "description": "The country of a user. Will generally show as a flag next to the user's display name.",
            "type": "string",
            "example": "FR"
          },
          "kind": {
            "description": "The kind of a user. Either a regular user or a bot.",
            "type": "string",
            "enum": [
              "user",
              "bot"
            ],
            "default": "user"
          },
          "updated_at": {
            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "type": "string",
            "format": "date-time",
            "example": "2017-07-21T17:32:28.000Z"
          },
          "details": {
            "description": "Details about a user.",
            "type": "object",
            "required": [
              "experience",
              "social_usernames",
              "created_at"
            ],
            "properties": {
              "bio": {
                "description": "A user's bio (profile description).",
                "type": "string"
              },
              "location": {
                "description": "A user's location. It's not formatted nor checked as an existing place, so it could be anything.",
                "type": "string"
              },
              "experience": {
                "type": "object"
              },
              "social_usernames": {
                "type": "object"
              },
              "created_at": {
                "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                "type": "string",
                "format": "date-time",
                "example": "2017-07-21T17:32:28.000Z"
              }
            }
          },
          "email": {
            "description": "An email address.",
            "type": "string",
            "format": "email"
          }
        }
      },
      "User.Create": {
        "description": "Informations required to create a user.",
        "type": "object",
        "required": [
          "username",
          "display_name",
          "email",
          "password",
          "confirm_password"
        ],
        "properties": {
          "username": {
            "description": "A username (`@`).",
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "pattern": "^[a-z0-9._-]{3,32}$",
            "example": "lorem_ipsum"
          },
          "display_name": {
            "description": "A user display name.",
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "example": "Lorem Ipsum"
          },
          "email": {
            "description": "An email address.",
            "type": "string",
            "format": "email"
          },
          "password": {
            "description": "A password.",
            "type": "string",
            "minLength": 8
          },
          "confirm_password": {
            "description": "A password.",
            "type": "string",
            "minLength": 8
          }
        },
        "example": {
          "username": "vapor",
          "display_name": "Vapor",
          "email": "test@vapor.codes",
          "password": "password",
          "confirm_password": "password"
        }
      },
      "ArrayOfUsers": {
        "description": "An array of users (without unnecessary details).",
        "type": "array",
        "items": {
          "description": "Public informations about a user (only required ones).",
          "type": "object",
          "required": [
            "id",
            "username",
            "display_name",
            "kind",
            "updated_at"
          ],
          "properties": {
            "id": {
              "description": "A `UUID` (or `GUID`).",
              "type": "string",
              "format": "uuid",
              "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
            },
            "username": {
              "description": "A username (`@`).",
              "type": "string",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^[a-z0-9._-]{3,32}$",
              "example": "lorem_ipsum"
            },
            "display_name": {
              "description": "A user display name.",
              "type": "string",
              "minLength": 3,
              "maxLength": 32,
              "example": "Lorem Ipsum"
            },
            "avatar": {
              "type": "object"
            },
            "country": {
              "description": "The country of a user. Will generally show as a flag next to the user's display name.",
              "type": "string",
              "example": "FR"
            },
            "kind": {
              "description": "The kind of a user. Either a regular user or a bot.",
              "type": "string",
              "enum": [
                "user",
                "bot"
              ],
              "default": "user"
            },
            "updated_at": {
              "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
              "type": "string",
              "format": "date-time",
              "example": "2017-07-21T17:32:28.000Z"
            }
          }
        }
      },
      "UsersPage": {
        "description": "A paginated array of users.",
        "type": "object",
        "required": [
          "items",
          "metadata"
        ],
        "properties": {
          "items": {
            "description": "An array of users (without unnecessary details).",
            "type": "array",
            "items": {
              "description": "Public informations about a user (only required ones).",
              "type": "object",
              "required": [
                "id",
                "username",
                "display_name",
                "kind",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "description": "A `UUID` (or `GUID`).",
                  "type": "string",
                  "format": "uuid",
                  "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                },
                "username": {
                  "description": "A username (`@`).",
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 32,
                  "pattern": "^[a-z0-9._-]{3,32}$",
                  "example": "lorem_ipsum"
                },
                "display_name": {
                  "description": "A user display name.",
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 32,
                  "example": "Lorem Ipsum"
                },
                "avatar": {
                  "type": "object"
                },
                "country": {
                  "description": "The country of a user. Will generally show as a flag next to the user's display name.",
                  "type": "string",
                  "example": "FR"
                },
                "kind": {
                  "description": "The kind of a user. Either a regular user or a bot.",
                  "type": "string",
                  "enum": [
                    "user",
                    "bot"
                  ],
                  "default": "user"
                },
                "updated_at": {
                  "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-07-21T17:32:28.000Z"
                }
              }
            }
          },
          "metadata": {
            "description": "Metadata about the response's pagination.",
            "type": "object",
            "required": [
              "page",
              "per",
              "total"
            ],
            "properties": {
              "page": {
                "description": "A pagination page number.",
                "type": "integer",
                "minimum": 1,
                "example": 3
              },
              "per": {
                "description": "The number of paginated items per page.",
                "type": "integer",
                "minimum": 1,
                "example": 10
              },
              "total": {
                "description": "The total count of elements in a paginated result. It represents the total in all pages, and **does not** depend on the number of items per page.",
                "type": "integer",
                "minimum": 0,
                "example": 42
              }
            }
          }
        }
      },
      "User.Token.Private": {
        "description": "A connection token.",
        "type": "object",
        "required": [
          "value",
          "expires_at",
          "created_at"
        ],
        "properties": {
          "value": {
            "description": "A Bearer token.",
            "type": "string"
          },
          "expires_at": {
            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). Can be `null`/`nil`.",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2017-07-21T17:32:28.000Z"
          },
          "created_at": {
            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "type": "string",
            "format": "date-time",
            "example": "2017-07-21T17:32:28.000Z"
          }
        }
      },
      "Place.ID": {
        "description": "A `UUID` (or `GUID`).",
        "type": "string",
        "format": "uuid",
        "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
      },
      "Place.State": {
        "description": "The state in which a place is.",
        "type": "string",
        "enum": [
          "unknown",
          "draft",
          "local",
          "private",
          "submitted",
          "published",
          "rejected"
        ]
      },
      "Place.Name": {
        "description": "A place `name`.",
        "type": "string",
        "minLength": 3,
        "maxLength": 48
      },
      "Place.Caption": {
        "description": "A place `caption`. Possibly empty.",
        "type": "string",
        "nullable": true,
        "example": "A great training spot with good walls of different sizes."
      },
      "Place.City": {
        "description": "The city in which a place is.",
        "type": "string",
        "minLength": 1,
        "example": "Nantes"
      },
      "Place.Country": {
        "description": "The city in which a place is.",
        "type": "string",
        "minLength": 1,
        "example": "France"
      },
      "Place.Category.ID": {
        "description": "A place category `ID`.",
        "type": "string",
        "enum": [
          "unknown",
          "spot",
          "facility",
          "misc"
        ]
      },
      "Place.Kind.ID": {
        "description": "A place kind `ID`.",
        "type": "string",
        "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
      },
      "Place.Property.ID": {
        "description": "A place property `ID`.",
        "type": "string",
        "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
        "example": "small_wall"
      },
      "Place.Property.Kind": {
        "description": "A place property kind.",
        "type": "string",
        "enum": [
          "feature",
          "technique",
          "benefit",
          "hazard"
        ]
      },
      "Place.Category.Localized": {
        "description": "A localized place `category`.",
        "type": "object",
        "required": [
          "id",
          "title"
        ],
        "properties": {
          "id": {
            "description": "A place category `ID`.",
            "type": "string",
            "enum": [
              "unknown",
              "spot",
              "facility",
              "misc"
            ]
          },
          "title": {
            "description": "A localized `title`.",
            "type": "string",
            "minLength": 1
          }
        },
        "example": {
          "id": "facility",
          "title": "Salle"
        }
      },
      "Place.Kind.Localized": {
        "description": "A localized place `kind`.",
        "type": "object",
        "required": [
          "id",
          "title"
        ],
        "properties": {
          "id": {
            "description": "A place kind `ID`.",
            "type": "string",
            "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
          },
          "title": {
            "description": "A localized `title`.",
            "type": "string",
            "minLength": 1
          }
        },
        "example": {
          "id": "training_spot",
          "title": "Lieu d'entraînement"
        }
      },
      "Place.Property.Localized": {
        "description": "A localized place property.",
        "type": "object",
        "required": [
          "id",
          "title",
          "kind"
        ],
        "properties": {
          "id": {
            "description": "A place property `ID`.",
            "type": "string",
            "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
            "example": "small_wall"
          },
          "title": {
            "description": "A localized `title`.",
            "type": "string",
            "minLength": 1
          },
          "kind": {
            "description": "A place property kind.",
            "type": "string",
            "enum": [
              "feature",
              "technique",
              "benefit",
              "hazard"
            ]
          }
        }
      },
      "Place.Location.Public": {
        "description": "The location (address) of a place.",
        "type": "object",
        "required": [
          "city",
          "country"
        ],
        "properties": {
          "city": {
            "description": "The city in which a place is.",
            "type": "string",
            "minLength": 1,
            "example": "Nantes"
          },
          "country": {
            "description": "The city in which a place is.",
            "type": "string",
            "minLength": 1,
            "example": "France"
          }
        }
      },
      "Place.Create": {
        "description": "An object with data required to create a new place.",
        "type": "object",
        "required": [
          "name",
          "latitude",
          "longitude",
          "kind",
          "properties"
        ],
        "properties": {
          "name": {
            "description": "A place `name`.",
            "type": "string",
            "minLength": 3,
            "maxLength": 48
          },
          "latitude": {
            "description": "The latitude component of a coordinate.",
            "type": "number",
            "format": "double",
            "minimum": -90,
            "maximum": 90
          },
          "longitude": {
            "description": "The longitude component of a coordinate.",
            "type": "number",
            "format": "double",
            "minimum": -180,
            "maximum": 180
          },
          "kind": {
            "description": "A place kind `ID`.",
            "type": "string",
            "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
          },
          "caption": {
            "description": "A place `caption`. Possibly empty.",
            "type": "string",
            "nullable": true,
            "example": "A great training spot with good walls of different sizes."
          },
          "images": {
            "description": "An array of image `URL`s.",
            "type": "array",
            "maxItems": 48,
            "items": {
              "description": "An image `URL`.",
              "type": "string",
              "format": "uri",
              "example": "https://monkiprojects.com"
            }
          },
          "properties": {
            "description": "An array of place properties.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "description": "A localized place property.",
              "type": "object",
              "required": [
                "id",
                "title",
                "kind"
              ],
              "properties": {
                "id": {
                  "description": "A place property `ID`.",
                  "type": "string",
                  "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                  "example": "small_wall"
                },
                "title": {
                  "description": "A localized `title`.",
                  "type": "string",
                  "minLength": 1
                },
                "kind": {
                  "description": "A place property kind.",
                  "type": "string",
                  "enum": [
                    "feature",
                    "technique",
                    "benefit",
                    "hazard"
                  ]
                }
              }
            }
          }
        }
      },
      "Place.Public": {
        "description": "A place, with all its details.",
        "type": "object",
        "required": [
          "id",
          "name",
          "latitude",
          "longitude",
          "kind",
          "category",
          "state",
          "creator",
          "details",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "A `UUID` (or `GUID`).",
            "type": "string",
            "format": "uuid",
            "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
          },
          "name": {
            "description": "A place `name`.",
            "type": "string",
            "minLength": 3,
            "maxLength": 48
          },
          "latitude": {
            "description": "The latitude component of a coordinate.",
            "type": "number",
            "format": "double",
            "minimum": -90,
            "maximum": 90
          },
          "longitude": {
            "description": "The longitude component of a coordinate.",
            "type": "number",
            "format": "double",
            "minimum": -180,
            "maximum": 180
          },
          "kind": {
            "description": "A place kind `ID`.",
            "type": "string",
            "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
          },
          "category": {
            "description": "A place category `ID`.",
            "type": "string",
            "enum": [
              "unknown",
              "spot",
              "facility",
              "misc"
            ]
          },
          "state": {
            "description": "The state in which a place is.",
            "type": "string",
            "enum": [
              "unknown",
              "draft",
              "local",
              "private",
              "submitted",
              "published",
              "rejected"
            ]
          },
          "creator": {
            "description": "A `UUID` (or `GUID`).",
            "type": "string",
            "format": "uuid",
            "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
          },
          "details": {
            "description": "The details of a place.",
            "type": "object",
            "required": [
              "caption",
              "satellite_image",
              "images",
              "properties"
            ],
            "properties": {
              "caption": {
                "description": "A place `caption`. Possibly empty.",
                "type": "string",
                "nullable": true,
                "example": "A great training spot with good walls of different sizes."
              },
              "satellite_image": {
                "description": "An image `URL`.",
                "type": "string",
                "format": "uri",
                "example": "https://monkiprojects.com"
              },
              "images": {
                "description": "An array of image `URL`s.",
                "type": "array",
                "maxItems": 48,
                "items": {
                  "description": "An image `URL`.",
                  "type": "string",
                  "format": "uri",
                  "example": "https://monkiprojects.com"
                }
              },
              "location": {
                "description": "The location (address) of a place.",
                "type": "object",
                "required": [
                  "city",
                  "country"
                ],
                "properties": {
                  "city": {
                    "description": "The city in which a place is.",
                    "type": "string",
                    "minLength": 1,
                    "example": "Nantes"
                  },
                  "country": {
                    "description": "The city in which a place is.",
                    "type": "string",
                    "minLength": 1,
                    "example": "France"
                  }
                }
              },
              "properties": {
                "description": "An array of place properties.",
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "description": "A localized place property.",
                  "type": "object",
                  "required": [
                    "id",
                    "title",
                    "kind"
                  ],
                  "properties": {
                    "id": {
                      "description": "A place property `ID`.",
                      "type": "string",
                      "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                      "example": "small_wall"
                    },
                    "title": {
                      "description": "A localized `title`.",
                      "type": "string",
                      "minLength": 1
                    },
                    "kind": {
                      "description": "A place property kind.",
                      "type": "string",
                      "enum": [
                        "feature",
                        "technique",
                        "benefit",
                        "hazard"
                      ]
                    }
                  }
                }
              }
            }
          },
          "created_at": {
            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "type": "string",
            "format": "date-time",
            "example": "2017-07-21T17:32:28.000Z"
          },
          "updated_at": {
            "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "type": "string",
            "format": "date-time",
            "example": "2017-07-21T17:32:28.000Z"
          }
        }
      },
      "Place.Details.Public": {
        "description": "The details of a place.",
        "type": "object",
        "required": [
          "caption",
          "satellite_image",
          "images",
          "properties"
        ],
        "properties": {
          "caption": {
            "description": "A place `caption`. Possibly empty.",
            "type": "string",
            "nullable": true,
            "example": "A great training spot with good walls of different sizes."
          },
          "satellite_image": {
            "description": "An image `URL`.",
            "type": "string",
            "format": "uri",
            "example": "https://monkiprojects.com"
          },
          "images": {
            "description": "An array of image `URL`s.",
            "type": "array",
            "maxItems": 48,
            "items": {
              "description": "An image `URL`.",
              "type": "string",
              "format": "uri",
              "example": "https://monkiprojects.com"
            }
          },
          "location": {
            "description": "The location (address) of a place.",
            "type": "object",
            "required": [
              "city",
              "country"
            ],
            "properties": {
              "city": {
                "description": "The city in which a place is.",
                "type": "string",
                "minLength": 1,
                "example": "Nantes"
              },
              "country": {
                "description": "The city in which a place is.",
                "type": "string",
                "minLength": 1,
                "example": "France"
              }
            }
          },
          "properties": {
            "description": "An array of place properties.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "description": "A localized place property.",
              "type": "object",
              "required": [
                "id",
                "title",
                "kind"
              ],
              "properties": {
                "id": {
                  "description": "A place property `ID`.",
                  "type": "string",
                  "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                  "example": "small_wall"
                },
                "title": {
                  "description": "A localized `title`.",
                  "type": "string",
                  "minLength": 1
                },
                "kind": {
                  "description": "A place property kind.",
                  "type": "string",
                  "enum": [
                    "feature",
                    "technique",
                    "benefit",
                    "hazard"
                  ]
                }
              }
            }
          }
        }
      },
      "ArrayOfPlaces": {
        "description": "An array of places.",
        "type": "array",
        "items": {
          "description": "A place, with all its details.",
          "type": "object",
          "required": [
            "id",
            "name",
            "latitude",
            "longitude",
            "kind",
            "category",
            "state",
            "creator",
            "details",
            "created_at",
            "updated_at"
          ],
          "properties": {
            "id": {
              "description": "A `UUID` (or `GUID`).",
              "type": "string",
              "format": "uuid",
              "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
            },
            "name": {
              "description": "A place `name`.",
              "type": "string",
              "minLength": 3,
              "maxLength": 48
            },
            "latitude": {
              "description": "The latitude component of a coordinate.",
              "type": "number",
              "format": "double",
              "minimum": -90,
              "maximum": 90
            },
            "longitude": {
              "description": "The longitude component of a coordinate.",
              "type": "number",
              "format": "double",
              "minimum": -180,
              "maximum": 180
            },
            "kind": {
              "description": "A place kind `ID`.",
              "type": "string",
              "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
            },
            "category": {
              "description": "A place category `ID`.",
              "type": "string",
              "enum": [
                "unknown",
                "spot",
                "facility",
                "misc"
              ]
            },
            "state": {
              "description": "The state in which a place is.",
              "type": "string",
              "enum": [
                "unknown",
                "draft",
                "local",
                "private",
                "submitted",
                "published",
                "rejected"
              ]
            },
            "creator": {
              "description": "A `UUID` (or `GUID`).",
              "type": "string",
              "format": "uuid",
              "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
            },
            "details": {
              "description": "The details of a place.",
              "type": "object",
              "required": [
                "caption",
                "satellite_image",
                "images",
                "properties"
              ],
              "properties": {
                "caption": {
                  "description": "A place `caption`. Possibly empty.",
                  "type": "string",
                  "nullable": true,
                  "example": "A great training spot with good walls of different sizes."
                },
                "satellite_image": {
                  "description": "An image `URL`.",
                  "type": "string",
                  "format": "uri",
                  "example": "https://monkiprojects.com"
                },
                "images": {
                  "description": "An array of image `URL`s.",
                  "type": "array",
                  "maxItems": 48,
                  "items": {
                    "description": "An image `URL`.",
                    "type": "string",
                    "format": "uri",
                    "example": "https://monkiprojects.com"
                  }
                },
                "location": {
                  "description": "The location (address) of a place.",
                  "type": "object",
                  "required": [
                    "city",
                    "country"
                  ],
                  "properties": {
                    "city": {
                      "description": "The city in which a place is.",
                      "type": "string",
                      "minLength": 1,
                      "example": "Nantes"
                    },
                    "country": {
                      "description": "The city in which a place is.",
                      "type": "string",
                      "minLength": 1,
                      "example": "France"
                    }
                  }
                },
                "properties": {
                  "description": "An array of place properties.",
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "description": "A localized place property.",
                    "type": "object",
                    "required": [
                      "id",
                      "title",
                      "kind"
                    ],
                    "properties": {
                      "id": {
                        "description": "A place property `ID`.",
                        "type": "string",
                        "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                        "example": "small_wall"
                      },
                      "title": {
                        "description": "A localized `title`.",
                        "type": "string",
                        "minLength": 1
                      },
                      "kind": {
                        "description": "A place property kind.",
                        "type": "string",
                        "enum": [
                          "feature",
                          "technique",
                          "benefit",
                          "hazard"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "created_at": {
              "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
              "type": "string",
              "format": "date-time",
              "example": "2017-07-21T17:32:28.000Z"
            },
            "updated_at": {
              "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
              "type": "string",
              "format": "date-time",
              "example": "2017-07-21T17:32:28.000Z"
            }
          }
        }
      },
      "ArrayOfPlacePropertyIDs": {
        "description": "An array of place property `ID`s.",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "description": "A place property `ID`.",
          "type": "string",
          "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
          "example": "small_wall"
        },
        "example": [
          "grass",
          "small_wall",
          "stairs"
        ]
      },
      "ArrayOfPlaceProperties": {
        "description": "An array of place properties.",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "description": "A localized place property.",
          "type": "object",
          "required": [
            "id",
            "title",
            "kind"
          ],
          "properties": {
            "id": {
              "description": "A place property `ID`.",
              "type": "string",
              "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
              "example": "small_wall"
            },
            "title": {
              "description": "A localized `title`.",
              "type": "string",
              "minLength": 1
            },
            "kind": {
              "description": "A place property kind.",
              "type": "string",
              "enum": [
                "feature",
                "technique",
                "benefit",
                "hazard"
              ]
            }
          }
        }
      },
      "ArrayOfImageURLs": {
        "description": "An array of image `URL`s.",
        "type": "array",
        "maxItems": 48,
        "items": {
          "description": "An image `URL`.",
          "type": "string",
          "format": "uri",
          "example": "https://monkiprojects.com"
        }
      },
      "PlacesPage": {
        "description": "A paginated array of places.",
        "type": "object",
        "required": [
          "items",
          "metadata"
        ],
        "properties": {
          "items": {
            "description": "An array of places.",
            "type": "array",
            "items": {
              "description": "A place, with all its details.",
              "type": "object",
              "required": [
                "id",
                "name",
                "latitude",
                "longitude",
                "kind",
                "category",
                "state",
                "creator",
                "details",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "description": "A `UUID` (or `GUID`).",
                  "type": "string",
                  "format": "uuid",
                  "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                },
                "name": {
                  "description": "A place `name`.",
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 48
                },
                "latitude": {
                  "description": "The latitude component of a coordinate.",
                  "type": "number",
                  "format": "double",
                  "minimum": -90,
                  "maximum": 90
                },
                "longitude": {
                  "description": "The longitude component of a coordinate.",
                  "type": "number",
                  "format": "double",
                  "minimum": -180,
                  "maximum": 180
                },
                "kind": {
                  "description": "A place kind `ID`.",
                  "type": "string",
                  "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
                },
                "category": {
                  "description": "A place category `ID`.",
                  "type": "string",
                  "enum": [
                    "unknown",
                    "spot",
                    "facility",
                    "misc"
                  ]
                },
                "state": {
                  "description": "The state in which a place is.",
                  "type": "string",
                  "enum": [
                    "unknown",
                    "draft",
                    "local",
                    "private",
                    "submitted",
                    "published",
                    "rejected"
                  ]
                },
                "creator": {
                  "description": "A `UUID` (or `GUID`).",
                  "type": "string",
                  "format": "uuid",
                  "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                },
                "details": {
                  "description": "The details of a place.",
                  "type": "object",
                  "required": [
                    "caption",
                    "satellite_image",
                    "images",
                    "properties"
                  ],
                  "properties": {
                    "caption": {
                      "description": "A place `caption`. Possibly empty.",
                      "type": "string",
                      "nullable": true,
                      "example": "A great training spot with good walls of different sizes."
                    },
                    "satellite_image": {
                      "description": "An image `URL`.",
                      "type": "string",
                      "format": "uri",
                      "example": "https://monkiprojects.com"
                    },
                    "images": {
                      "description": "An array of image `URL`s.",
                      "type": "array",
                      "maxItems": 48,
                      "items": {
                        "description": "An image `URL`.",
                        "type": "string",
                        "format": "uri",
                        "example": "https://monkiprojects.com"
                      }
                    },
                    "location": {
                      "description": "The location (address) of a place.",
                      "type": "object",
                      "required": [
                        "city",
                        "country"
                      ],
                      "properties": {
                        "city": {
                          "description": "The city in which a place is.",
                          "type": "string",
                          "minLength": 1,
                          "example": "Nantes"
                        },
                        "country": {
                          "description": "The city in which a place is.",
                          "type": "string",
                          "minLength": 1,
                          "example": "France"
                        }
                      }
                    },
                    "properties": {
                      "description": "An array of place properties.",
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "description": "A localized place property.",
                        "type": "object",
                        "required": [
                          "id",
                          "title",
                          "kind"
                        ],
                        "properties": {
                          "id": {
                            "description": "A place property `ID`.",
                            "type": "string",
                            "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                            "example": "small_wall"
                          },
                          "title": {
                            "description": "A localized `title`.",
                            "type": "string",
                            "minLength": 1
                          },
                          "kind": {
                            "description": "A place property kind.",
                            "type": "string",
                            "enum": [
                              "feature",
                              "technique",
                              "benefit",
                              "hazard"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "created_at": {
                  "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-07-21T17:32:28.000Z"
                },
                "updated_at": {
                  "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-07-21T17:32:28.000Z"
                }
              }
            }
          },
          "metadata": {
            "description": "Metadata about the response's pagination.",
            "type": "object",
            "required": [
              "page",
              "per",
              "total"
            ],
            "properties": {
              "page": {
                "description": "A pagination page number.",
                "type": "integer",
                "minimum": 1,
                "example": 3
              },
              "per": {
                "description": "The number of paginated items per page.",
                "type": "integer",
                "minimum": 1,
                "example": 10
              },
              "total": {
                "description": "The total count of elements in a paginated result. It represents the total in all pages, and **does not** depend on the number of items per page.",
                "type": "integer",
                "minimum": 0,
                "example": 42
              }
            }
          }
        }
      },
      "LocalizedTitle": {
        "description": "A localized `title`.",
        "type": "string",
        "minLength": 1
      },
      "Latitude": {
        "description": "The latitude component of a coordinate.",
        "type": "number",
        "format": "double",
        "minimum": -90,
        "maximum": 90
      },
      "Longitude": {
        "description": "The longitude component of a coordinate.",
        "type": "number",
        "format": "double",
        "minimum": -180,
        "maximum": 180
      },
      "Review.Comment": {
        "description": "A review comment. Possibly empty.",
        "type": "string",
        "example": "Great spot, very diverse! I like to go there for long training sessions."
      },
      "ModeratedFlag": {
        "description": "A flag saying something has been moderated.",
        "type": "boolean",
        "example": true
      },
      "PaginatePage": {
        "description": "A pagination page number.",
        "type": "integer",
        "minimum": 1,
        "example": 3
      },
      "PaginatePerPage": {
        "description": "The number of paginated items per page.",
        "type": "integer",
        "minimum": 1,
        "example": 10
      },
      "ID": {
        "description": "A `UUID` (or `GUID`).",
        "type": "string",
        "format": "uuid",
        "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
      },
      "AvatarSource": {
        "type": "object"
      },
      "DateTime": {
        "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "type": "string",
        "format": "date-time",
        "example": "2017-07-21T17:32:28.000Z"
      },
      "PaginateTotal": {
        "description": "The total count of elements in a paginated result. It represents the total in all pages, and **does not** depend on the number of items per page.",
        "type": "integer",
        "minimum": 0,
        "example": 42
      },
      "PaginateMetadata": {
        "description": "Metadata about the response's pagination.",
        "type": "object",
        "required": [
          "page",
          "per",
          "total"
        ],
        "properties": {
          "page": {
            "description": "A pagination page number.",
            "type": "integer",
            "minimum": 1,
            "example": 3
          },
          "per": {
            "description": "The number of paginated items per page.",
            "type": "integer",
            "minimum": 1,
            "example": 10
          },
          "total": {
            "description": "The total count of elements in a paginated result. It represents the total in all pages, and **does not** depend on the number of items per page.",
            "type": "integer",
            "minimum": 0,
            "example": 42
          }
        }
      },
      "Email": {
        "description": "An email address.",
        "type": "string",
        "format": "email"
      },
      "Password": {
        "description": "A password.",
        "type": "string",
        "minLength": 8
      },
      "Error": {
        "description": "An error thrown by an API.",
        "type": "object",
        "required": [
          "error",
          "reason"
        ],
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "BearerToken": {
        "description": "A Bearer token.",
        "type": "string"
      },
      "NullableDateTime": {
        "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). Can be `null`/`nil`.",
        "type": "string",
        "format": "date-time",
        "nullable": true,
        "example": "2017-07-21T17:32:28.000Z"
      },
      "Locale": {
        "description": "A locale, as described in [Language and Locale IDs](https://tinyurl.com/apple-language-and-locale-ids).",
        "type": "string",
        "format": "locale",
        "minLength": 2,
        "default": "en",
        "example": "fr-FR"
      },
      "ImageURL": {
        "description": "An image `URL`.",
        "type": "string",
        "format": "uri",
        "example": "https://monkiprojects.com"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication information is missing or is invalid.",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "Unauthorized": {
                "value": {
                  "error": true,
                  "reason": "Unauthorized"
                }
              }
            }
          }
        }
      },
      "AuthUnauthorizedError": {
        "description": "Authentication information is missing or is invalid.",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Unauthorized_BearerAuth": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "No auth provided": {
                "value": {
                  "error": true,
                  "reason": "Invalid authorization token."
                }
              },
              "Invalid auth type": {
                "value": {
                  "error": true,
                  "reason": "Invalid authorization token."
                }
              },
              "Invalid token": {
                "value": {
                  "error": true,
                  "reason": "Invalid authorization token."
                }
              }
            }
          }
        }
      },
      "CreatePlace_Success": {
        "description": "Successfully Created",
        "content": {
          "application/json": {
            "schema": {
              "description": "A place, with all its details.",
              "type": "object",
              "required": [
                "id",
                "name",
                "latitude",
                "longitude",
                "kind",
                "category",
                "state",
                "creator",
                "details",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "description": "A `UUID` (or `GUID`).",
                  "type": "string",
                  "format": "uuid",
                  "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                },
                "name": {
                  "description": "A place `name`.",
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 48
                },
                "latitude": {
                  "description": "The latitude component of a coordinate.",
                  "type": "number",
                  "format": "double",
                  "minimum": -90,
                  "maximum": 90
                },
                "longitude": {
                  "description": "The longitude component of a coordinate.",
                  "type": "number",
                  "format": "double",
                  "minimum": -180,
                  "maximum": 180
                },
                "kind": {
                  "description": "A place kind `ID`.",
                  "type": "string",
                  "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
                },
                "category": {
                  "description": "A place category `ID`.",
                  "type": "string",
                  "enum": [
                    "unknown",
                    "spot",
                    "facility",
                    "misc"
                  ]
                },
                "state": {
                  "description": "The state in which a place is.",
                  "type": "string",
                  "enum": [
                    "unknown",
                    "draft",
                    "local",
                    "private",
                    "submitted",
                    "published",
                    "rejected"
                  ]
                },
                "creator": {
                  "description": "A `UUID` (or `GUID`).",
                  "type": "string",
                  "format": "uuid",
                  "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                },
                "details": {
                  "description": "The details of a place.",
                  "type": "object",
                  "required": [
                    "caption",
                    "satellite_image",
                    "images",
                    "properties"
                  ],
                  "properties": {
                    "caption": {
                      "description": "A place `caption`. Possibly empty.",
                      "type": "string",
                      "nullable": true,
                      "example": "A great training spot with good walls of different sizes."
                    },
                    "satellite_image": {
                      "description": "An image `URL`.",
                      "type": "string",
                      "format": "uri",
                      "example": "https://monkiprojects.com"
                    },
                    "images": {
                      "description": "An array of image `URL`s.",
                      "type": "array",
                      "maxItems": 48,
                      "items": {
                        "description": "An image `URL`.",
                        "type": "string",
                        "format": "uri",
                        "example": "https://monkiprojects.com"
                      }
                    },
                    "location": {
                      "description": "The location (address) of a place.",
                      "type": "object",
                      "required": [
                        "city",
                        "country"
                      ],
                      "properties": {
                        "city": {
                          "description": "The city in which a place is.",
                          "type": "string",
                          "minLength": 1,
                          "example": "Nantes"
                        },
                        "country": {
                          "description": "The city in which a place is.",
                          "type": "string",
                          "minLength": 1,
                          "example": "France"
                        }
                      }
                    },
                    "properties": {
                      "description": "An array of place properties.",
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "description": "A localized place property.",
                        "type": "object",
                        "required": [
                          "id",
                          "title",
                          "kind"
                        ],
                        "properties": {
                          "id": {
                            "description": "A place property `ID`.",
                            "type": "string",
                            "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                            "example": "small_wall"
                          },
                          "title": {
                            "description": "A localized `title`.",
                            "type": "string",
                            "minLength": 1
                          },
                          "kind": {
                            "description": "A place property kind.",
                            "type": "string",
                            "enum": [
                              "feature",
                              "technique",
                              "benefit",
                              "hazard"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "created_at": {
                  "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-07-21T17:32:28.000Z"
                },
                "updated_at": {
                  "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-07-21T17:32:28.000Z"
                }
              }
            },
            "examples": {
              "Created place": {
                "summary": "Newly created place",
                "value": {
                  "latitude": 48.8583,
                  "longitude": 2.2945,
                  "category": "spot",
                  "kind": "training_spot",
                  "creator": "D9CFF0B0-75DA-4A59-9BDB-A268299F4C97",
                  "details": {
                    "images": [],
                    "satellite_image": "https://res.cloudinary.com/monki-projects/image/upload/f_auto/satellite_images/satellite-view-placeholder.jpg",
                    "caption": "Test caption",
                    "properties": [
                      {
                        "id": "small_wall",
                        "title": "Small Wall",
                        "kind": "feature"
                      }
                    ]
                  },
                  "created_at": "2021-03-10T09:01:04Z",
                  "state": "private",
                  "id": "FD58CE36-5504-4743-8E9F-955A6D18DAA1",
                  "updated_at": "2021-03-10T09:01:04Z",
                  "name": "Test place"
                }
              }
            }
          }
        }
      },
      "CreatePlace_BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "Missing field": {
                "value": {
                  "error": true,
                  "reason": "name is required"
                }
              },
              "Name too small": {
                "value": {
                  "error": true,
                  "reason": "name is less than minimum of 3 character(s)"
                }
              },
              "Invalid coordinates": {
                "value": {
                  "error": true,
                  "reason": "latitude is greater than maximum of 90.0"
                }
              },
              "Invalid kind": {
                "description": "We could not find the place kind you provided.",
                "value": {
                  "error": true,
                  "reason": "Place kind not found"
                }
              },
              "Invalid property": {
                "value": {
                  "error": true,
                  "reason": "Invalid property: { \"kind\": \"feature\", \"id\": \"random_id\" }"
                }
              }
            }
          }
        }
      },
      "ListPlaces_Success": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "description": "A paginated array of places.",
              "type": "object",
              "required": [
                "items",
                "metadata"
              ],
              "properties": {
                "items": {
                  "description": "An array of places.",
                  "type": "array",
                  "items": {
                    "description": "A place, with all its details.",
                    "type": "object",
                    "required": [
                      "id",
                      "name",
                      "latitude",
                      "longitude",
                      "kind",
                      "category",
                      "state",
                      "creator",
                      "details",
                      "created_at",
                      "updated_at"
                    ],
                    "properties": {
                      "id": {
                        "description": "A `UUID` (or `GUID`).",
                        "type": "string",
                        "format": "uuid",
                        "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                      },
                      "name": {
                        "description": "A place `name`.",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 48
                      },
                      "latitude": {
                        "description": "The latitude component of a coordinate.",
                        "type": "number",
                        "format": "double",
                        "minimum": -90,
                        "maximum": 90
                      },
                      "longitude": {
                        "description": "The longitude component of a coordinate.",
                        "type": "number",
                        "format": "double",
                        "minimum": -180,
                        "maximum": 180
                      },
                      "kind": {
                        "description": "A place kind `ID`.",
                        "type": "string",
                        "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
                      },
                      "category": {
                        "description": "A place category `ID`.",
                        "type": "string",
                        "enum": [
                          "unknown",
                          "spot",
                          "facility",
                          "misc"
                        ]
                      },
                      "state": {
                        "description": "The state in which a place is.",
                        "type": "string",
                        "enum": [
                          "unknown",
                          "draft",
                          "local",
                          "private",
                          "submitted",
                          "published",
                          "rejected"
                        ]
                      },
                      "creator": {
                        "description": "A `UUID` (or `GUID`).",
                        "type": "string",
                        "format": "uuid",
                        "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                      },
                      "details": {
                        "description": "The details of a place.",
                        "type": "object",
                        "required": [
                          "caption",
                          "satellite_image",
                          "images",
                          "properties"
                        ],
                        "properties": {
                          "caption": {
                            "description": "A place `caption`. Possibly empty.",
                            "type": "string",
                            "nullable": true,
                            "example": "A great training spot with good walls of different sizes."
                          },
                          "satellite_image": {
                            "description": "An image `URL`.",
                            "type": "string",
                            "format": "uri",
                            "example": "https://monkiprojects.com"
                          },
                          "images": {
                            "description": "An array of image `URL`s.",
                            "type": "array",
                            "maxItems": 48,
                            "items": {
                              "description": "An image `URL`.",
                              "type": "string",
                              "format": "uri",
                              "example": "https://monkiprojects.com"
                            }
                          },
                          "location": {
                            "description": "The location (address) of a place.",
                            "type": "object",
                            "required": [
                              "city",
                              "country"
                            ],
                            "properties": {
                              "city": {
                                "description": "The city in which a place is.",
                                "type": "string",
                                "minLength": 1,
                                "example": "Nantes"
                              },
                              "country": {
                                "description": "The city in which a place is.",
                                "type": "string",
                                "minLength": 1,
                                "example": "France"
                              }
                            }
                          },
                          "properties": {
                            "description": "An array of place properties.",
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                              "description": "A localized place property.",
                              "type": "object",
                              "required": [
                                "id",
                                "title",
                                "kind"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A place property `ID`.",
                                  "type": "string",
                                  "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                                  "example": "small_wall"
                                },
                                "title": {
                                  "description": "A localized `title`.",
                                  "type": "string",
                                  "minLength": 1
                                },
                                "kind": {
                                  "description": "A place property kind.",
                                  "type": "string",
                                  "enum": [
                                    "feature",
                                    "technique",
                                    "benefit",
                                    "hazard"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      },
                      "created_at": {
                        "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                        "type": "string",
                        "format": "date-time",
                        "example": "2017-07-21T17:32:28.000Z"
                      },
                      "updated_at": {
                        "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                        "type": "string",
                        "format": "date-time",
                        "example": "2017-07-21T17:32:28.000Z"
                      }
                    }
                  }
                },
                "metadata": {
                  "description": "Metadata about the response's pagination.",
                  "type": "object",
                  "required": [
                    "page",
                    "per",
                    "total"
                  ],
                  "properties": {
                    "page": {
                      "description": "A pagination page number.",
                      "type": "integer",
                      "minimum": 1,
                      "example": 3
                    },
                    "per": {
                      "description": "The number of paginated items per page.",
                      "type": "integer",
                      "minimum": 1,
                      "example": 10
                    },
                    "total": {
                      "description": "The total count of elements in a paginated result. It represents the total in all pages, and **does not** depend on the number of items per page.",
                      "type": "integer",
                      "minimum": 0,
                      "example": 42
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListPlaces_BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "Invalid state query param": {
                "value": {
                  "error": true,
                  "reason": "Cannot initialize State from invalid String value lorem_ipsum for key state"
                }
              }
            }
          }
        }
      },
      "ListPlaces_Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "Private state": {
                "value": {
                  "error": true,
                  "reason": "You cannot list private places without being authenticated"
                }
              }
            }
          }
        }
      },
      "GetPlace_Success": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "description": "A place, with all its details.",
              "type": "object",
              "required": [
                "id",
                "name",
                "latitude",
                "longitude",
                "kind",
                "category",
                "state",
                "creator",
                "details",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "description": "A `UUID` (or `GUID`).",
                  "type": "string",
                  "format": "uuid",
                  "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                },
                "name": {
                  "description": "A place `name`.",
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 48
                },
                "latitude": {
                  "description": "The latitude component of a coordinate.",
                  "type": "number",
                  "format": "double",
                  "minimum": -90,
                  "maximum": 90
                },
                "longitude": {
                  "description": "The longitude component of a coordinate.",
                  "type": "number",
                  "format": "double",
                  "minimum": -180,
                  "maximum": 180
                },
                "kind": {
                  "description": "A place kind `ID`.",
                  "type": "string",
                  "pattern": "^(?:[a-z0-9]+_)*[a-z0-9]+$"
                },
                "category": {
                  "description": "A place category `ID`.",
                  "type": "string",
                  "enum": [
                    "unknown",
                    "spot",
                    "facility",
                    "misc"
                  ]
                },
                "state": {
                  "description": "The state in which a place is.",
                  "type": "string",
                  "enum": [
                    "unknown",
                    "draft",
                    "local",
                    "private",
                    "submitted",
                    "published",
                    "rejected"
                  ]
                },
                "creator": {
                  "description": "A `UUID` (or `GUID`).",
                  "type": "string",
                  "format": "uuid",
                  "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
                },
                "details": {
                  "description": "The details of a place.",
                  "type": "object",
                  "required": [
                    "caption",
                    "satellite_image",
                    "images",
                    "properties"
                  ],
                  "properties": {
                    "caption": {
                      "description": "A place `caption`. Possibly empty.",
                      "type": "string",
                      "nullable": true,
                      "example": "A great training spot with good walls of different sizes."
                    },
                    "satellite_image": {
                      "description": "An image `URL`.",
                      "type": "string",
                      "format": "uri",
                      "example": "https://monkiprojects.com"
                    },
                    "images": {
                      "description": "An array of image `URL`s.",
                      "type": "array",
                      "maxItems": 48,
                      "items": {
                        "description": "An image `URL`.",
                        "type": "string",
                        "format": "uri",
                        "example": "https://monkiprojects.com"
                      }
                    },
                    "location": {
                      "description": "The location (address) of a place.",
                      "type": "object",
                      "required": [
                        "city",
                        "country"
                      ],
                      "properties": {
                        "city": {
                          "description": "The city in which a place is.",
                          "type": "string",
                          "minLength": 1,
                          "example": "Nantes"
                        },
                        "country": {
                          "description": "The city in which a place is.",
                          "type": "string",
                          "minLength": 1,
                          "example": "France"
                        }
                      }
                    },
                    "properties": {
                      "description": "An array of place properties.",
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "description": "A localized place property.",
                        "type": "object",
                        "required": [
                          "id",
                          "title",
                          "kind"
                        ],
                        "properties": {
                          "id": {
                            "description": "A place property `ID`.",
                            "type": "string",
                            "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                            "example": "small_wall"
                          },
                          "title": {
                            "description": "A localized `title`.",
                            "type": "string",
                            "minLength": 1
                          },
                          "kind": {
                            "description": "A place property kind.",
                            "type": "string",
                            "enum": [
                              "feature",
                              "technique",
                              "benefit",
                              "hazard"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "created_at": {
                  "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-07-21T17:32:28.000Z"
                },
                "updated_at": {
                  "description": "A `Date` with time, as described in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).",
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-07-21T17:32:28.000Z"
                }
              }
            }
          }
        }
      },
      "GetPlace_NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "Place not found": {
                "value": {
                  "error": true,
                  "reason": "Place not found."
                }
              }
            }
          }
        }
      },
      "DeletePlace_Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "Not your place": {
                "description": "You cannot delete someone else's place.",
                "value": {
                  "error": true,
                  "reason": "You cannot delete someone else's place!"
                }
              }
            }
          }
        }
      },
      "DeletePlace_NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "Place not found": {
                "value": {
                  "error": true,
                  "reason": "Place not found."
                }
              }
            }
          }
        }
      },
      "ListPlaceProperties_Success": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "description": "An array of place properties.",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "description": "A localized place property.",
                "type": "object",
                "required": [
                  "id",
                  "title",
                  "kind"
                ],
                "properties": {
                  "id": {
                    "description": "A place property `ID`.",
                    "type": "string",
                    "pattern": "^(?:[a-z0-9]+\\+?_)*[a-z0-9]+$",
                    "example": "small_wall"
                  },
                  "title": {
                    "description": "A localized `title`.",
                    "type": "string",
                    "minLength": 1
                  },
                  "kind": {
                    "description": "A place property kind.",
                    "type": "string",
                    "enum": [
                      "feature",
                      "technique",
                      "benefit",
                      "hazard"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "ListPlaceProperties_BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "description": "An error thrown by an API.",
              "type": "object",
              "required": [
                "error",
                "reason"
              ],
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "reason": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "Invalid property kind": {
                "value": {
                  "error": true,
                  "reason": "Invalid property kind: \"lorem\""
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "UserId": {
        "in": "path",
        "name": "userId",
        "description": "A user ID.",
        "required": true,
        "schema": {
          "description": "A `UUID` (or `GUID`).",
          "type": "string",
          "format": "uuid",
          "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
        }
      },
      "PlaceId": {
        "in": "path",
        "name": "placeId",
        "description": "A unique place identifier.",
        "required": true,
        "schema": {
          "description": "A `UUID` (or `GUID`).",
          "type": "string",
          "format": "uuid",
          "example": "ad959e79-55c3-4445-8c51-a74b6d52691a"
        }
      },
      "PlaceState": {
        "in": "query",
        "name": "state",
        "description": "A state to filter places. Default is 'published'.",
        "schema": {
          "description": "The state in which a place is.",
          "type": "string",
          "enum": [
            "unknown",
            "draft",
            "local",
            "private",
            "submitted",
            "published",
            "rejected"
          ]
        }
      },
      "PlacePropertyKind": {
        "in": "query",
        "name": "kind",
        "description": "A kind to filter properties.",
        "required": true,
        "schema": {
          "description": "A place property kind.",
          "type": "string",
          "enum": [
            "feature",
            "technique",
            "benefit",
            "hazard"
          ]
        }
      },
      "PaginatePage": {
        "in": "query",
        "name": "page",
        "description": "The pagination page. For example, if you paginate 1 to 42 per 10 and ask for the third page, you will get 31 to 40.",
        "required": true,
        "schema": {
          "description": "A pagination page number.",
          "type": "integer",
          "minimum": 1,
          "example": 3
        }
      },
      "PaginatePerPage": {
        "in": "query",
        "name": "per",
        "description": "The number of paginated items per page. For example, if you paginate 1 to 42 per 10 and ask for the third page, you will get 31 to 40.",
        "required": true,
        "schema": {
          "description": "The number of paginated items per page.",
          "type": "integer",
          "minimum": 1,
          "example": 10
        }
      },
      "Locale": {
        "in": "query",
        "name": "locale",
        "description": "The desired locale for response localization.",
        "schema": {
          "description": "A locale, as described in [Language and Locale IDs](https://tinyurl.com/apple-language-and-locale-ids).",
          "type": "string",
          "format": "locale",
          "minLength": 2,
          "default": "en",
          "example": "fr-FR"
        }
      }
    },
    "examples": {
      "NewPlace": {
        "summary": "Newly created place",
        "value": {
          "latitude": 48.8583,
          "longitude": 2.2945,
          "category": "spot",
          "kind": "training_spot",
          "creator": "D9CFF0B0-75DA-4A59-9BDB-A268299F4C97",
          "details": {
            "images": [],
            "satellite_image": "https://res.cloudinary.com/monki-projects/image/upload/f_auto/satellite_images/satellite-view-placeholder.jpg",
            "caption": "Test caption",
            "properties": [
              {
                "id": "small_wall",
                "title": "Small Wall",
                "kind": "feature"
              }
            ]
          },
          "created_at": "2021-03-10T09:01:04Z",
          "state": "private",
          "id": "FD58CE36-5504-4743-8E9F-955A6D18DAA1",
          "updated_at": "2021-03-10T09:01:04Z",
          "name": "Test place"
        }
      },
      "Spot1": {
        "summary": "Example spot",
        "value": {
          "id": "4f9058b3-3f8f-4b10-b3c0-e28c654012e4",
          "name": "Espace de street workout Vincent Gâche",
          "latitude": 47.207423,
          "longitude": -1.547817,
          "kind": {
            "id": "calisthenics_park",
            "title": "Parc de street workout",
            "locale": "fr-FR"
          },
          "category": {
            "id": "spot",
            "title": "Spot",
            "locale": "fr-FR"
          },
          "state": "published",
          "created_at": "2020-12-02T01:43:52.285Z",
          "updated_at": "2020-12-22T22:26:11.618Z"
        }
      },
      "Spot2": {
        "summary": "Example spot",
        "value": {
          "id": "31256d06-7786-4555-8592-ec20e9c9cdfb",
          "name": "Porte des deux moulins",
          "latitude": 46.155295,
          "longitude": -1.159034,
          "kind": {
            "id": "training_spot",
            "title": "Lieu d'entraînement",
            "locale": "fr-FR"
          },
          "category": {
            "id": "spot",
            "title": "Spot",
            "locale": "fr-FR"
          },
          "state": "published",
          "created_at": "2020-04-15T15:28:41.729Z",
          "updated_at": "2020-04-15T15:28:41.729Z"
        }
      },
      "Feature1": {
        "summary": "Example place feature",
        "value": {
          "id": "grass",
          "title": "Herbe",
          "locale": "fr-FR"
        }
      },
      "Feature2": {
        "summary": "Example place feature",
        "value": {
          "id": "small_wall",
          "title": "Petit mur",
          "locale": "fr-FR"
        }
      },
      "Technique1": {
        "summary": "Example technique",
        "value": {
          "id": "double_kong",
          "title": "Double saut de chat",
          "locale": "fr-FR"
        }
      },
      "Technique2": {
        "summary": "Example technique",
        "value": {
          "id": "precision_jump",
          "title": "Saut de précision",
          "locale": "fr-FR"
        }
      },
      "Benefit1": {
        "summary": "Example place benefit",
        "value": {
          "id": "covered_area",
          "title": "Espace couvert",
          "locale": "fr-FR"
        }
      },
      "Benefit2": {
        "summary": "Example place benefit",
        "value": {
          "id": "drinking_fountain",
          "title": "Fontaine à eau",
          "locale": "fr-FR"
        }
      },
      "Hazard1": {
        "summary": "Example place hazard",
        "value": {
          "id": "security",
          "title": "Sécurité",
          "locale": "fr-FR"
        }
      },
      "Hazard2": {
        "summary": "Example place hazard",
        "value": {
          "id": "security_cam",
          "title": "Caméra de sécurité",
          "locale": "fr-FR"
        }
      },
      "UnauthorizedError": {
        "description": "Authentication information is missing or is invalid.",
        "value": {
          "error": true,
          "reason": "Unauthorized"
        }
      },
      "BearerAuthNoAuthError": {
        "value": {
          "error": true,
          "reason": "Invalid authorization token."
        }
      },
      "BearerAuthInvalidAuthType": {
        "value": {
          "error": true,
          "reason": "Invalid authorization token."
        }
      },
      "BearerAuthInvalidToken": {
        "value": {
          "error": true,
          "reason": "Invalid authorization token."
        }
      },
      "PlaceNotFoundError": {
        "value": {
          "error": true,
          "reason": "Place not found."
        }
      },
      "PlaceNotSubmittedError": {
        "value": {
          "error": true,
          "reason": "Place not submitted."
        }
      },
      "PlaceKindNotFoundError": {
        "description": "We could not find the place kind you provided.",
        "value": {
          "error": true,
          "reason": "Place kind not found"
        }
      },
      "PlaceNameTooSmallError": {
        "value": {
          "error": true,
          "reason": "name is less than minimum of 3 character(s)"
        }
      },
      "InvalidPlaceStateError": {
        "value": {
          "error": true,
          "reason": "Cannot initialize State from invalid String value lorem_ipsum for key state"
        }
      },
      "InvalidPlacePropertyError": {
        "value": {
          "error": true,
          "reason": "Invalid property: { \"kind\": \"feature\", \"id\": \"random_id\" }"
        }
      },
      "InvalidPlacePropertyKindError": {
        "value": {
          "error": true,
          "reason": "Invalid property kind: \"lorem\""
        }
      },
      "CreatePlaceMissingFieldError": {
        "value": {
          "error": true,
          "reason": "name is required"
        }
      },
      "CannotDeleteSomeoneElsesPlaceError": {
        "description": "You cannot delete someone else's place.",
        "value": {
          "error": true,
          "reason": "You cannot delete someone else's place!"
        }
      },
      "InvalidCoordinatesError": {
        "value": {
          "error": true,
          "reason": "latitude is greater than maximum of 90.0"
        }
      },
      "ForbiddenModeratedFlagError": {
        "description": "Cannot use `moderated` flag.",
        "value": {
          "error": true,
          "reason": "You need to be a moderator in order to use the `moderated` flag."
        }
      }
    }
  }
}