openapi: 3.0.3
info:
  version: 1.0.0
  title: Monki Projects Users API
servers:
  - url: 'https://api.monkiprojects.com/v1'
    description: Monki Projects API v1 (prod)
  - url: 'https://pre-prod.api.monkiprojects.com/v1'
    description: Monki Projects API v1 (pre-prod)
tags:
  - name: users
    description: Endpoints related to users.
  - name: auth
    description: Endpoints related to authentication.
paths:
  /users:
    post:
      summary: Create User
      description: Creates a user.
      operationId: createUser
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Create'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Private'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidEmail:
                  value:
                    error: true
                    reason: Your email address is invalid.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict with other user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                UsernameNotAvailable:
                  value:
                    error: true
                    reason: Email or username already taken
                EmailNotAvailable:
                  value:
                    error: true
                    reason: Email or username already taken
    get:
      summary: List Users
      description: Returns the list of all users.
      operationId: listUsers
      tags:
        - users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfUsers'
  '/users/{userId}':
    get:
      summary: Get User Details
      description: Returns details about a particular user.
      operationId: getUser
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Public'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: true
                reason: User not found.
        '422':
          description: Bad user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: true
                reason: Unprocessable Entity
    delete:
      summary: Delete User
      description: Deletes a user.
      operationId: deleteUser
      tags:
        - users
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: User ID malformatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: true
                reason: Unprocessable Entity
  /login:
    post:
      tags:
        - users
        - auth
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Token'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  schemas:
    User.Public:
      description: Public details about a user
      type: object
      required:
        - id
        - username
        - display_name
        - avatar_url
        - type
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        avatar_url:
          description: Used by websites as `<img>`'s `src` field
          type: string
        country:
          type: string
        type:
          type: string
        updated_at:
          description: A date used to update data on client side
          type: string
          format: date-time
    User.Private:
      description: Private details about a user
      type: object
      required:
        - id
        - username
        - display_name
        - avatar_url
        - type
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        avatar_url:
          description: Used by websites as `<img>`'s `src` field
          type: string
        country:
          type: string
        type:
          type: string
        updated_at:
          description: A date used to update data on client side
          type: string
          format: date-time
    User.Create:
      type: object
      required:
        - username
        - display_name
        - email
        - password
        - confirm_password
      properties:
        username:
          description: User name
          type: string
          minLength: 3
          maxLength: 32
          pattern: '^[a-z0-9._]{3,32}$'
        display_name:
          description: User display name
          type: string
        email:
          description: Email
          type: string
          format: email
        password:
          description: Password
          type: string
          minLength: 8
        confirm_password:
          description: Password confirmation
          type: string
          minLength: 8
      example:
        username: vapor
        display_name: Vapor
        email: test@vapor.codes
        password: password
        confirm_password: password
    User.Token:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User.Private'
    ArrayOfUsers:
      description: An array of users
      type: array
      items:
        $ref: '#/components/schemas/User.Public'
    Error:
      type: object
      required:
        - error
        - reason
      properties:
        error:
          type: boolean
        reason:
          type: string
    ID:
      description: A `UUID` (or `GUID`).
      type: string
      format: uuid
      example: ad959e79-55c3-4445-8c51-a74b6d52691a
  responses:
    UnauthorizedError:
      description: Authentication information is missing or is invalid.
      headers:
        WWW_Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: true
            reason: Unauthorized
  parameters:
    UserId:
      in: path
      name: userId
      description: A user ID.
      required: true
      schema:
        $ref: '#/components/schemas/ID'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
