openapi: 3.0.3
info:
  version: 0.1.0
  title: Monki Projects API
servers:
  - description: Monki Projects' API v1 (production)
    url: 'https://api.monkiprojects.com'
  - description: Monki Projects' API v1 (staging / development)
    url: 'https://staging.api.monkiprojects.com'
tags:
  - name: users
    description: Endpoints related to users.
  - name: auth
    description: Endpoints related to authentication.
  - name: places
    description: Endpoints related to places.
  - name: localized
    description: Endpoints with localizable responses.
paths:
  /users/v1/:
    post:
      summary: Create User
      description: Creates a user.
      operationId: createUser
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Create'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Private'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: schemas.yaml#/Error
              examples:
                InvalidEmail:
                  value:
                    error: true
                    reason: Your email address is invalid.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict with other user
          content:
            application/json:
              schema:
                $ref: schemas.yaml#/Error
              examples:
                UsernameNotAvailable:
                  value:
                    error: true
                    reason: Email or username already taken
                EmailNotAvailable:
                  value:
                    error: true
                    reason: Email or username already taken
    get:
      summary: List Users
      description: Returns the list of all users.
      operationId: listUsers
      tags:
        - users
      parameters:
        - $ref: parameters.yaml#/PaginatePage
        - $ref: parameters.yaml#/PaginatePerPage
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPage'
  '/users/v1/{userId}':
    get:
      summary: Get User Details
      description: Returns details about a particular user.
      operationId: getUser
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Public.Full'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: schemas.yaml#/Error
              examples:
                User not found:
                  value:
                    error: true
                    reason: User not found.
        '422':
          description: Bad user ID
          content:
            application/json:
              schema:
                $ref: schemas.yaml#/Error
              examples:
                Unprocessable Entity:
                  value:
                    error: true
                    reason: Unprocessable Entity
    delete:
      summary: Delete User
      description: Deletes a user.
      operationId: deleteUser
      tags:
        - users
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: User ID malformatted
          content:
            application/json:
              schema:
                $ref: schemas.yaml#/Error
              examples:
                Unprocessable Entity:
                  value:
                    error: true
                    reason: Unprocessable Entity
  /auth/v1/login:
    post:
      summary: Log In
      operationId: logIn
      tags:
        - auth
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Token.Private'
        '401':
          $ref: '#/components/responses/AuthUnauthorizedError'
  /auth/v1/me:
    post:
      summary: Get Me
      operationId: getMe
      tags:
        - auth
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: users-api-v1.yaml#/components/schemas/User.Private
        '401':
          $ref: '#/components/responses/AuthUnauthorizedError'
  /places/v1/:
    post:
      summary: Create Place
      description: Creates a place.
      operationId: createPlace
      tags:
        - places
        - localized
      security:
        - BearerAuth: []
      parameters:
        - $ref: parameters.yaml#/Locale
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place.Create'
      responses:
        '201':
          $ref: '#/components/responses/CreatePlace_Success'
        '400':
          $ref: '#/components/responses/CreatePlace_BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized_BearerAuth'
    get:
      summary: List Places
      description: >-
        Lists all published places by default. If a `state` query parameter
        is set, this endpoint will list all places in the specified state.
      operationId: listPlaces
      tags:
        - places
        - localized
      parameters:
        - $ref: parameters.yaml#/PaginatePage
        - $ref: parameters.yaml#/PaginatePerPage
        - $ref: '#/components/parameters/PlaceState'
        - $ref: parameters.yaml#/Locale
      responses:
        '200':
          $ref: '#/components/responses/ListPlaces_Success'
        '400':
          $ref: '#/components/responses/ListPlaces_BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized_BearerAuth'
        '403':
          $ref: '#/components/responses/ListPlaces_Forbidden'
  '/places/v1/{placeId}':
    get:
      summary: Get Place
      description: Gets a place's details.
      operationId: getPlace
      tags:
        - places
        - localized
      parameters:
        - $ref: '#/components/parameters/PlaceId'
        - $ref: parameters.yaml#/Locale
      responses:
        '200':
          $ref: '#/components/responses/GetPlace_Success'
        '404':
          $ref: '#/components/responses/GetPlace_NotFound'
    delete:
      summary: Delete Place
      description: Deletes a place.
      operationId: deletePlace
      tags:
        - places
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PlaceId'
      responses:
        '204':
          description: Successfully Deleted
        '401':
          $ref: '#/components/responses/Unauthorized_BearerAuth'
        '403':
          $ref: '#/components/responses/DeletePlace_Forbidden'
        '404':
          $ref: '#/components/responses/DeletePlace_NotFound'
  /places/v1/properties:
    get:
      summary: List Available Place Properties
      description: Lists available place properties by kind.
      operationId: listPlaceProperties
      tags:
        - places
        - localized
      parameters:
        - $ref: '#/components/parameters/PlacePropertyKind'
        - $ref: parameters.yaml#/Locale
      responses:
        '200':
          $ref: '#/components/responses/ListPlaceProperties_Success'
        '400':
          $ref: '#/components/responses/ListPlaceProperties_BadRequest'
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User.ID:
      $ref: schemas.yaml#/ID
    User.Username:
      description: A username (`@`).
      type: string
      minLength: 3
      maxLength: 32
      pattern: '^[a-z0-9._-]{3,32}$'
      example: lorem_ipsum
    User.DisplayName:
      description: A user display name.
      type: string
      minLength: 3
      maxLength: 32
      example: Lorem Ipsum
    User.Country:
      description: >-
        The country of a user. Will generally show as a flag next to the user's
        display name.
      type: string
      example: FR
    User.Kind:
      description: The kind of a user. Either a regular user or a bot.
      type: string
      enum:
        - user
        - bot
      default: user
    User.Bio:
      description: A user's bio (profile description).
      type: string
    User.Location:
      description: >-
        A user's location. It's not formatted nor checked as an existing place,
        so it could be anything.
      type: string
    User.Experience:
      type: object
    User.SocialUsernames:
      type: object
    User.Public.Small:
      description: Public informations about a user (only required ones).
      type: object
      required:
        - id
        - username
        - display_name
        - kind
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/User.ID'
        username:
          $ref: '#/components/schemas/User.Username'
        display_name:
          $ref: '#/components/schemas/User.DisplayName'
        avatar:
          $ref: schemas.yaml#/AvatarSource
        country:
          $ref: '#/components/schemas/User.Country'
        kind:
          $ref: '#/components/schemas/User.Kind'
        updated_at:
          $ref: schemas.yaml#/DateTime
    User.Details:
      description: Details about a user.
      type: object
      required:
        - experience
        - social_usernames
        - created_at
      properties:
        bio:
          $ref: '#/components/schemas/User.Bio'
        location:
          $ref: '#/components/schemas/User.Location'
        experience:
          $ref: '#/components/schemas/User.Experience'
        social_usernames:
          $ref: '#/components/schemas/User.SocialUsernames'
        created_at:
          $ref: schemas.yaml#/DateTime
    User.Public.Full:
      description: Public informations about a user (including all details).
      type: object
      required:
        - id
        - username
        - display_name
        - kind
        - updated_at
        - details
      properties:
        id:
          $ref: '#/components/schemas/User.ID'
        username:
          $ref: '#/components/schemas/User.Username'
        display_name:
          $ref: '#/components/schemas/User.DisplayName'
        avatar:
          $ref: schemas.yaml#/AvatarSource
        country:
          $ref: '#/components/schemas/User.Country'
        kind:
          $ref: '#/components/schemas/User.Kind'
        updated_at:
          $ref: schemas.yaml#/DateTime
        details:
          $ref: '#/components/schemas/User.Details'
    User.Private:
      description: Private details about a user.
      type: object
      required:
        - id
        - username
        - display_name
        - kind
        - updated_at
        - details
        - email
      properties:
        id:
          $ref: '#/components/schemas/User.ID'
        username:
          $ref: '#/components/schemas/User.Username'
        display_name:
          $ref: '#/components/schemas/User.DisplayName'
        avatar:
          $ref: schemas.yaml#/AvatarSource
        country:
          $ref: '#/components/schemas/User.Country'
        kind:
          $ref: '#/components/schemas/User.Kind'
        updated_at:
          $ref: schemas.yaml#/DateTime
        details:
          $ref: '#/components/schemas/User.Details'
        email:
          $ref: schemas.yaml#/Email
    User.Create:
      description: Informations required to create a user.
      type: object
      required:
        - username
        - display_name
        - email
        - password
        - confirm_password
      properties:
        username:
          $ref: '#/components/schemas/User.Username'
        display_name:
          $ref: '#/components/schemas/User.DisplayName'
        email:
          $ref: schemas.yaml#/Email
        password:
          $ref: schemas.yaml#/Password
        confirm_password:
          $ref: schemas.yaml#/Password
      example:
        username: vapor
        display_name: Vapor
        email: test@vapor.codes
        password: password
        confirm_password: password
    ArrayOfUsers:
      description: An array of users (without unnecessary details).
      type: array
      items:
        $ref: '#/components/schemas/User.Public.Small'
    UsersPage:
      description: A paginated array of users.
      type: object
      required:
        - items
        - metadata
      properties:
        items:
          $ref: '#/components/schemas/ArrayOfUsers'
        metadata:
          $ref: schemas.yaml#/PaginateMetadata
    User.Token.Private:
      description: A connection token.
      type: object
      required:
        - value
        - expires_at
        - created_at
      properties:
        value:
          $ref: schemas.yaml#/BearerToken
        expires_at:
          $ref: schemas.yaml#/NullableDateTime
        created_at:
          $ref: schemas.yaml#/DateTime
    Place.ID:
      $ref: schemas.yaml#/ID
    Place.State:
      description: The state in which a place is.
      type: string
      enum:
        - unknown
        - draft
        - local
        - private
        - submitted
        - published
        - rejected
    Place.Name:
      description: A place `name`.
      type: string
      minLength: 3
      maxLength: 48
    Place.Caption:
      description: A place `caption`. Possibly empty.
      type: string
      nullable: true
      example: A great training spot with good walls of different sizes.
    Place.City:
      description: The city in which a place is.
      type: string
      minLength: 1
      example: Nantes
    Place.Country:
      description: The city in which a place is.
      type: string
      minLength: 1
      example: France
    Place.Category.ID:
      description: A place category `ID`.
      type: string
      enum:
        - unknown
        - spot
        - facility
        - misc
    Place.Kind.ID:
      description: A place kind `ID`.
      type: string
      pattern: '^(?:[a-z0-9]+_)*[a-z0-9]+$'
    Place.Property.ID:
      description: A place property `ID`.
      type: string
      pattern: '^(?:[a-z0-9]+\+?_)*[a-z0-9]+$'
      example: small_wall
    Place.Property.Kind:
      description: A place property kind.
      type: string
      enum:
        - feature
        - technique
        - benefit
        - hazard
    Place.Category.Localized:
      description: A localized place `category`.
      type: object
      required:
        - id
        - title
      properties:
        id:
          $ref: '#/components/schemas/Place.Category.ID'
        title:
          $ref: '#/components/schemas/LocalizedTitle'
      example:
        id: facility
        title: Salle
    Place.Kind.Localized:
      description: A localized place `kind`.
      type: object
      required:
        - id
        - title
      properties:
        id:
          $ref: '#/components/schemas/Place.Kind.ID'
        title:
          $ref: '#/components/schemas/LocalizedTitle'
      example:
        id: training_spot
        title: Lieu d'entraînement
    Place.Property.Localized:
      description: A localized place property.
      type: object
      required:
        - id
        - title
        - kind
      properties:
        id:
          $ref: '#/components/schemas/Place.Property.ID'
        title:
          $ref: '#/components/schemas/LocalizedTitle'
        kind:
          $ref: '#/components/schemas/Place.Property.Kind'
    Place.Location.Public:
      description: The location (address) of a place.
      type: object
      required:
        - city
        - country
      properties:
        city:
          $ref: '#/components/schemas/Place.City'
        country:
          $ref: '#/components/schemas/Place.Country'
    Place.Create:
      description: An object with data required to create a new place.
      type: object
      required:
        - name
        - latitude
        - longitude
        - kind
        - properties
      properties:
        name:
          $ref: '#/components/schemas/Place.Name'
        latitude:
          $ref: '#/components/schemas/Latitude'
        longitude:
          $ref: '#/components/schemas/Longitude'
        kind:
          $ref: '#/components/schemas/Place.Kind.ID'
        caption:
          $ref: '#/components/schemas/Place.Caption'
        images:
          $ref: '#/components/schemas/ArrayOfImageURLs'
        properties:
          $ref: '#/components/schemas/ArrayOfPlaceProperties'
    Place.Public:
      description: 'A place, with all its details.'
      type: object
      required:
        - id
        - name
        - latitude
        - longitude
        - kind
        - category
        - state
        - creator
        - details
        - created_at
        - updated_at
      properties:
        id:
          $ref: schemas.yaml#/ID
        name:
          $ref: '#/components/schemas/Place.Name'
        latitude:
          $ref: '#/components/schemas/Latitude'
        longitude:
          $ref: '#/components/schemas/Longitude'
        kind:
          $ref: '#/components/schemas/Place.Kind.ID'
        category:
          $ref: '#/components/schemas/Place.Category.ID'
        state:
          $ref: '#/components/schemas/Place.State'
        creator:
          $ref: users-api-v1.yaml#/components/schemas/User.ID
        details:
          $ref: '#/components/schemas/Place.Details.Public'
        created_at:
          $ref: schemas.yaml#/DateTime
        updated_at:
          $ref: schemas.yaml#/DateTime
    Place.Details.Public:
      description: The details of a place.
      type: object
      required:
        - caption
        - satellite_image
        - images
        - properties
      properties:
        caption:
          $ref: '#/components/schemas/Place.Caption'
        satellite_image:
          $ref: schemas.yaml#/ImageURL
        images:
          $ref: '#/components/schemas/ArrayOfImageURLs'
        location:
          $ref: '#/components/schemas/Place.Location.Public'
        properties:
          $ref: '#/components/schemas/ArrayOfPlaceProperties'
    ArrayOfPlaces:
      description: An array of places.
      type: array
      items:
        $ref: '#/components/schemas/Place.Public'
    ArrayOfPlacePropertyIDs:
      description: An array of place property `ID`s.
      type: array
      uniqueItems: true
      items:
        $ref: '#/components/schemas/Place.Property.ID'
      example:
        - grass
        - small_wall
        - stairs
    ArrayOfPlaceProperties:
      description: An array of place properties.
      type: array
      uniqueItems: true
      items:
        $ref: '#/components/schemas/Place.Property.Localized'
    ArrayOfImageURLs:
      description: An array of image `URL`s.
      type: array
      maxItems: 48
      items:
        $ref: schemas.yaml#/ImageURL
    PlacesPage:
      description: A paginated array of places.
      type: object
      required:
        - items
        - metadata
      properties:
        items:
          $ref: '#/components/schemas/ArrayOfPlaces'
        metadata:
          $ref: schemas.yaml#/PaginateMetadata
    LocalizedTitle:
      description: A localized `title`.
      type: string
      minLength: 1
    Latitude:
      description: The latitude component of a coordinate.
      type: number
      format: double
      minimum: -90
      maximum: 90
    Longitude:
      description: The longitude component of a coordinate.
      type: number
      format: double
      minimum: -180
      maximum: 180
    Review.Comment:
      description: A review comment. Possibly empty.
      type: string
      example: 'Great spot, very diverse! I like to go there for long training sessions.'
    ModeratedFlag:
      description: A flag saying something has been moderated.
      type: boolean
      example: true
  responses:
    UnauthorizedError:
      description: Authentication information is missing or is invalid.
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
          examples:
            Unauthorized:
              value:
                error: true
                reason: Unauthorized
    AuthUnauthorizedError:
      description: Authentication information is missing or is invalid.
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
    Unauthorized_BearerAuth:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
          examples:
            No auth provided:
              $ref: '#/components/examples/BearerAuthNoAuthError'
            Invalid auth type:
              $ref: '#/components/examples/BearerAuthInvalidAuthType'
            Invalid token:
              $ref: '#/components/examples/BearerAuthInvalidToken'
    CreatePlace_Success:
      description: Successfully Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Place.Public'
          examples:
            Created place:
              $ref: '#/components/examples/NewPlace'
    CreatePlace_BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
          examples:
            Missing field:
              $ref: '#/components/examples/CreatePlaceMissingFieldError'
            Name too small:
              $ref: '#/components/examples/PlaceNameTooSmallError'
            Invalid coordinates:
              $ref: '#/components/examples/InvalidCoordinatesError'
            Invalid kind:
              $ref: '#/components/examples/PlaceKindNotFoundError'
            Invalid property:
              $ref: '#/components/examples/InvalidPlacePropertyError'
    ListPlaces_Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlacesPage'
    ListPlaces_BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
          examples:
            Invalid state query param:
              $ref: '#/components/examples/InvalidPlaceStateError'
    ListPlaces_Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
          examples:
            Private state:
              value:
                error: true
                reason: You cannot list private places without being authenticated
    GetPlace_Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Place.Public'
    GetPlace_NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
          examples:
            Place not found:
              $ref: '#/components/examples/PlaceNotFoundError'
    DeletePlace_Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
          examples:
            Not your place:
              $ref: '#/components/examples/CannotDeleteSomeoneElsesPlaceError'
    DeletePlace_NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
          examples:
            Place not found:
              $ref: '#/components/examples/PlaceNotFoundError'
    ListPlaceProperties_Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfPlaceProperties'
    ListPlaceProperties_BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: schemas.yaml#/Error
          examples:
            Invalid property kind:
              $ref: '#/components/examples/InvalidPlacePropertyKindError'
  parameters:
    UserId:
      in: path
      name: userId
      description: A user ID.
      required: true
      schema:
        $ref: schemas.yaml#/ID
    PlaceId:
      in: path
      name: placeId
      description: A unique place identifier.
      required: true
      schema:
        $ref: '#/components/schemas/Place.ID'
    PlaceState:
      in: query
      name: state
      description: A state to filter places. Default is 'published'.
      schema:
        $ref: '#/components/schemas/Place.State'
    PlacePropertyKind:
      in: query
      name: kind
      description: A kind to filter properties.
      required: true
      schema:
        $ref: '#/components/schemas/Place.Property.Kind'
  examples:
    NewPlace:
      summary: Newly created place
      value:
        latitude: 48.8583
        longitude: 2.2945
        category: spot
        kind: training_spot
        creator: D9CFF0B0-75DA-4A59-9BDB-A268299F4C97
        details:
          images: []
          satellite_image: >-
            https://res.cloudinary.com/monki-projects/image/upload/f_auto/satellite_images/satellite-view-placeholder.jpg
          caption: Test caption
          properties:
            - id: small_wall
              title: Small Wall
              kind: feature
        created_at: '2021-03-10T09:01:04Z'
        state: private
        id: FD58CE36-5504-4743-8E9F-955A6D18DAA1
        updated_at: '2021-03-10T09:01:04Z'
        name: Test place
    Spot1:
      summary: Example spot
      value:
        id: 4f9058b3-3f8f-4b10-b3c0-e28c654012e4
        name: Espace de street workout Vincent Gâche
        latitude: 47.207423
        longitude: -1.547817
        kind:
          id: calisthenics_park
          title: Parc de street workout
          locale: fr-FR
        category:
          id: spot
          title: Spot
          locale: fr-FR
        state: published
        created_at: '2020-12-02T01:43:52.285Z'
        updated_at: '2020-12-22T22:26:11.618Z'
    Spot2:
      summary: Example spot
      value:
        id: 31256d06-7786-4555-8592-ec20e9c9cdfb
        name: Porte des deux moulins
        latitude: 46.155295
        longitude: -1.159034
        kind:
          id: training_spot
          title: Lieu d'entraînement
          locale: fr-FR
        category:
          id: spot
          title: Spot
          locale: fr-FR
        state: published
        created_at: '2020-04-15T15:28:41.729Z'
        updated_at: '2020-04-15T15:28:41.729Z'
    Feature1:
      summary: Example place feature
      value:
        id: grass
        title: Herbe
        locale: fr-FR
    Feature2:
      summary: Example place feature
      value:
        id: small_wall
        title: Petit mur
        locale: fr-FR
    Technique1:
      summary: Example technique
      value:
        id: double_kong
        title: Double saut de chat
        locale: fr-FR
    Technique2:
      summary: Example technique
      value:
        id: precision_jump
        title: Saut de précision
        locale: fr-FR
    Benefit1:
      summary: Example place benefit
      value:
        id: covered_area
        title: Espace couvert
        locale: fr-FR
    Benefit2:
      summary: Example place benefit
      value:
        id: drinking_fountain
        title: Fontaine à eau
        locale: fr-FR
    Hazard1:
      summary: Example place hazard
      value:
        id: security
        title: Sécurité
        locale: fr-FR
    Hazard2:
      summary: Example place hazard
      value:
        id: security_cam
        title: Caméra de sécurité
        locale: fr-FR
    UnauthorizedError:
      description: Authentication information is missing or is invalid.
      value:
        error: true
        reason: Unauthorized
    BearerAuthNoAuthError:
      value:
        error: true
        reason: Invalid authorization token.
    BearerAuthInvalidAuthType:
      value:
        error: true
        reason: Invalid authorization token.
    BearerAuthInvalidToken:
      value:
        error: true
        reason: Invalid authorization token.
    PlaceNotFoundError:
      value:
        error: true
        reason: Place not found.
    PlaceNotSubmittedError:
      value:
        error: true
        reason: Place not submitted.
    PlaceKindNotFoundError:
      description: We could not find the place kind you provided.
      value:
        error: true
        reason: Place kind not found
    PlaceNameTooSmallError:
      value:
        error: true
        reason: name is less than minimum of 3 character(s)
    InvalidPlaceStateError:
      value:
        error: true
        reason: >-
          Cannot initialize State from invalid String value lorem_ipsum for key
          state
    InvalidPlacePropertyError:
      value:
        error: true
        reason: 'Invalid property: { "kind": "feature", "id": "random_id" }'
    InvalidPlacePropertyKindError:
      value:
        error: true
        reason: 'Invalid property kind: "lorem"'
    CreatePlaceMissingFieldError:
      value:
        error: true
        reason: name is required
    CannotDeleteSomeoneElsesPlaceError:
      description: You cannot delete someone else's place.
      value:
        error: true
        reason: You cannot delete someone else's place!
    InvalidCoordinatesError:
      value:
        error: true
        reason: latitude is greater than maximum of 90.0
    ForbiddenModeratedFlagError:
      description: Cannot use `moderated` flag.
      value:
        error: true
        reason: You need to be a moderator in order to use the `moderated` flag.
